{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\acy-dex-swap\\\\src\\\\components\\\\SwapComponent.js\",\n    _s = $RefreshSig$();\n\nimport { useWeb3React } from \"@web3-react/core\";\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { ACYSwapErrorStatus, approve, calculateGasMargin, checkTokenIsApproved, computeTradePriceBreakdown, getAllowance, getContract, getRouterContract, getUserTokenBalance, getUserTokenBalanceRaw, INITIAL_ALLOWED_SLIPPAGE, isZero, ROUTER_ADDRESS, supportedTokens } from \"../utils\";\nimport { Alert, Button, Dropdown, Form, FormControl, InputGroup } from \"react-bootstrap\";\nimport WETHABI from \"../abis/WETH.json\";\nimport { CurrencyAmount, ETHER, FACTORY_ADDRESS, Fetcher, InsufficientReservesError, Pair, Percent, Route, Router, Token, TokenAmount, Trade, TradeType, WETH } from \"@uniswap/sdk\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { parseUnits } from \"@ethersproject/units\"; // get the estimated amount  of the other token required when swapping, in readable string.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport async function swapGetEstimated(inputToken0, inputToken1, allowedSlippage = INITIAL_ALLOWED_SLIPPAGE, exactIn = true, chainId, library, account, setToken0Amount, setToken1Amount, setNeedApprove, setApproveAmount, setApproveButtonStatus, setSwapBreakdown, setSwapButtonState, setSwapButtonContent, setSwapStatus, setPair, setRoute, setTrade, setSlippageAdjustedAmount, setMinAmountOut, setMaxAmountIn, setWethContract, setWrappedAmount) {\n  let status = await (async () => {\n    // check uniswap\n    console.log(FACTORY_ADDRESS); // change slippage from bips (0.01%) into percentage\n\n    let slippage = allowedSlippage * 0.01;\n    allowedSlippage = new Percent(allowedSlippage, 10000);\n    setSwapBreakdown(\"\");\n    setSwapButtonState(false);\n    setSwapButtonContent(\"loading...\");\n    setSwapStatus(\"\");\n    let contract = getRouterContract(library, account);\n    let {\n      address: inToken0Address,\n      symbol: inToken0Symbol,\n      decimal: inToken0Decimal,\n      amount: inToken0Amount\n    } = inputToken0;\n    let {\n      address: inToken1Address,\n      symbol: inToken1Symbol,\n      decimal: inToken1Decimal,\n      amount: inToken1Amount\n    } = inputToken1;\n    if (!inputToken0.symbol || !inputToken1.symbol) return new ACYSwapErrorStatus(\"please choose tokens\");\n    if (exactIn && inToken0Amount == \"0\") return new ACYSwapErrorStatus(\"token0Amount is 0\");\n    if (!exactIn && inToken1Amount == \"0\") return new ACYSwapErrorStatus(\"token1Amount is 0\");\n    if (exactIn && inToken0Amount == \"\") return new ACYSwapErrorStatus(\"token0Amount is \\\"\\\"\");\n    if (!exactIn && inToken1Amount == \"\") return new ACYSwapErrorStatus(\"token1Amount is \\\"\\\"\");\n    if (exactIn && isNaN(parseFloat(inToken0Amount))) return new ACYSwapErrorStatus(\"token0Amount is NaN\");\n    if (!exactIn && isNaN(parseFloat(inToken1Amount))) return new ACYSwapErrorStatus(\"token1Amount is NaN\");\n    console.log(`token0Amount: ${inToken0Amount}`);\n    console.log(`token1Amount: ${inToken1Amount}`);\n    let token0IsETH = inToken0Symbol === \"ETH\";\n    let token1IsETH = inToken1Symbol === \"ETH\";\n    console.log(inputToken0);\n    console.log(inputToken1);\n\n    if (token0IsETH && token1IsETH) {\n      setSwapButtonState(false);\n      setSwapButtonContent(\"don't support ETH to ETH\");\n      return new ACYSwapErrorStatus(\"don't support ETH to ETH\");\n    } // if one is ETH and other WETH, use WETH contract's deposit and withdraw\n    // wrap ETH into WETH\n    else if (token0IsETH && inToken1Symbol === \"WETH\") {\n        // UI should sync value of ETH and WETH\n        if (exactIn) {\n          setToken1Amount(inToken0Amount);\n          inToken1Amount = inToken0Amount;\n        } else {\n          setToken0Amount(inToken1Amount);\n          inToken0Amount = inToken1Amount;\n        }\n\n        console.log(\"------------------ CHECK BALANCE ------------------\"); // Big Number comparison\n\n        let userToken0Balance = await getUserTokenBalanceRaw(token0IsETH ? ETHER : new Token(chainId, inToken0Address, inToken0Decimal, inToken0Symbol), account, library);\n        let userHasSufficientBalance;\n\n        try {\n          userHasSufficientBalance = userToken0Balance.gte(parseUnits(inToken0Amount, inToken0Decimal));\n        } catch (e) {\n          console.log(\"this is wrong!\");\n          console.log(e);\n          setSwapButtonState(false);\n          if (e.fault === \"underflow\") setSwapButtonContent(e.fault);else setSwapButtonContent(\"unknow error\");\n          return new ACYSwapErrorStatus(e.fault);\n        }\n\n        ;\n        console.log(userToken0Balance);\n        console.log(\"token0Amount\");\n        console.log(inToken0Amount); // quit if user doesn't have enough balance, otherwise this will cause error\n\n        if (!userHasSufficientBalance) {\n          setSwapButtonState(false);\n          setSwapButtonContent(\"NOT enough balance\");\n          return new ACYSwapErrorStatus(\"NOT enough balance\");\n        } // setEstimatedStatus(\"change ETH to WETH\");\n\n\n        setSwapButtonState(true);\n        setSwapButtonContent(\"wrap\");\n        const wethContract = getContract(inToken1Address, WETHABI, library, account);\n        let wrappedAmount;\n\n        try {\n          wrappedAmount = BigNumber.from(parseUnits(inToken0Amount, inToken0Decimal)).toHexString();\n        } catch (e) {\n          console.log(\"wrappedAmount!!\");\n          console.log(e);\n          setSwapButtonState(false);\n\n          if (e.fault === \"underflow\") {\n            setSwapButtonContent(e.fault);\n            return new ACYSwapErrorStatus(e.fault);\n          } else {\n            setSwapButtonContent(\"unknow error\");\n            return new ACYSwapErrorStatus(\"unknow error\");\n          }\n        }\n\n        ;\n        setWethContract(wethContract);\n        setWrappedAmount(wrappedAmount); // let result = await wethContract\n        //     .deposit({\n        //         value: wrappedAmount,\n        //     })\n        //     .catch((e) => {\n        //         console.log(e);\n        //         return new ACYSwapErrorStatus(\"WETH Deposit failed\");\n        //     });\n        // return result;\n\n        return \"Wrap is ok\";\n      } else if (inToken0Symbol === \"WETH\" && token1IsETH) {\n        console.log(\"UNWRAP\");\n\n        if (exactIn) {\n          setToken1Amount(inToken0Amount);\n          inToken1Amount = inToken0Amount;\n        } else {\n          setToken0Amount(inToken1Amount);\n          inToken0Amount = inToken1Amount;\n        }\n\n        let userToken0Balance = await getUserTokenBalanceRaw(token0IsETH ? ETHER : new Token(chainId, inToken0Address, inToken0Decimal, inToken0Symbol), account, library);\n        let userHasSufficientBalance;\n\n        try {\n          userHasSufficientBalance = userToken0Balance.gte(parseUnits(inToken0Amount, inToken0Decimal));\n        } catch (e) {\n          console.log(\"userHasSufficientBalance!!!\");\n          console.log(e);\n          setSwapButtonState(false);\n\n          if (e.fault === \"underflow\") {\n            setSwapButtonContent(e.fault);\n            return new ACYSwapErrorStatus(e.fault);\n          } else {\n            setSwapButtonContent(\"unknow error\");\n            return new ACYSwapErrorStatus(\"unknow error\");\n          }\n        }\n\n        ; // quit if user doesn't have enough balance, otherwise this will cause error\n\n        if (!userHasSufficientBalance) {\n          setSwapButtonState(false);\n          setSwapButtonContent(\"Not enough balance\");\n          return new ACYSwapErrorStatus(\"NOT enough balance\");\n        }\n\n        setSwapButtonState(true);\n        setSwapButtonContent(\"unwrap\");\n        const wethContract = getContract(inToken0Address, WETHABI, library, account);\n        let wrappedAmount;\n\n        try {\n          wrappedAmount = BigNumber.from(parseUnits(inToken0Amount, inToken0Decimal)).toHexString();\n        } catch (e) {\n          console.log(\"wrappedAmount!!!\");\n          console.log(e);\n          setSwapButtonState(false);\n\n          if (e.fault === \"underflow\") {\n            setSwapButtonContent(e.fault);\n            return new ACYSwapErrorStatus(e.fault);\n          } else {\n            setSwapButtonContent(\"unknow error\");\n            return new ACYSwapErrorStatus(\"unknow error\");\n          }\n        }\n\n        setWethContract(wethContract);\n        setWrappedAmount(wrappedAmount); // let result = await wethContract.withdraw(wrappedAmount).catch((e) => {\n        //     console.log(e);\n        //     return new ACYSwapErrorStatus(\"WETH Withdrawal failed\");\n        // });\n        // return result;\n\n        return \"unwrap is ok\";\n      } // ETH <-> Non-WETH ERC20     OR     Non-WETH ERC20 <-> Non-WETH ERC20\n      else {\n          console.log(\"SWAP\");\n          console.log(\"------------------ CONSTRUCT TOKEN ------------------\"); // use WETH for ETHER to work with Uniswap V2 SDK\n\n          const token0 = token0IsETH ? WETH[chainId] : new Token(chainId, inToken0Address, inToken0Decimal, inToken0Symbol);\n          const token1 = token1IsETH ? WETH[chainId] : new Token(chainId, inToken1Address, inToken1Decimal, inToken1Symbol);\n\n          if (token0.equals(token1)) {\n            setSwapButtonState(false);\n            setSwapButtonContent(\"tokens are same\");\n            return new ACYSwapErrorStatus(\"tokens are same\");\n          } // get pair using our own provider\n\n\n          const pair = await Fetcher.fetchPairData(token0, token1, library).catch(e => {\n            return new ACYSwapErrorStatus(`${token0.symbol} - ${token1.symbol} pool does not exist. Create one?`);\n          });\n\n          if (pair instanceof ACYSwapErrorStatus) {\n            setSwapButtonState(false);\n            setSwapButtonContent(\"pool doesn't exist\");\n            return pair;\n          }\n\n          console.log(pair);\n          setPair(pair);\n          console.log(\"------------------ CONSTRUCT ROUTE ------------------\"); // This is where we let Uniswap SDK know we are not using WETH but ETHER\n\n          const route = new Route([pair], token0IsETH ? ETHER : token0, token1IsETH ? ETHER : token1);\n          console.log(route);\n          setRoute(route);\n          console.log(\"------------------ PARSE AMOUNT ------------------\"); // convert typed in amount to BigNumbe rusing ethers.js's parseUnits then to string,\n\n          console.log(inToken0Amount);\n          console.log(inToken0Decimal);\n          let parsedAmount;\n\n          try {\n            parsedAmount = exactIn ? new TokenAmount(token0, parseUnits(inToken0Amount, inToken0Decimal)).raw.toString(16) : new TokenAmount(token1, parseUnits(inToken1Amount, inToken1Decimal)).raw.toString(16);\n          } catch (e) {\n            console.log(\"parsedAmount!!!\");\n            console.log(e);\n            setSwapButtonState(false);\n\n            if (e.fault === \"underflow\") {\n              setSwapButtonContent(e.fault);\n              return new ACYSwapErrorStatus(e.fault);\n            } else {\n              setSwapButtonContent(\"unknow error\");\n              return new ACYSwapErrorStatus(\"unknow error\");\n            }\n          }\n\n          let inputAmount; // CurrencyAmount instance is required for Trade contructor if input is ETHER\n\n          if (token0IsETH && exactIn || token1IsETH && !exactIn) {\n            inputAmount = new CurrencyAmount(ETHER, `0x${parsedAmount}`);\n          } else {\n            inputAmount = new TokenAmount(exactIn ? token0 : token1, `0x${parsedAmount}`);\n          }\n\n          console.log(\"estimated dependent amount\"); // console.log(pair.priceOf(token0).quote(inputAmount).raw.toString());\n\n          let dependentTokenAmount = pair.priceOf(token0).quote(new TokenAmount(token0, inputAmount.raw));\n          let parsed = token1 === ETHER ? CurrencyAmount.ether(dependentTokenAmount.raw) : dependentTokenAmount;\n          console.log(parsed.toExact()); //===================================================================================\n\n          console.log(\"------------------ CONSTRUCT TRADE ------------------\");\n          let trade;\n\n          try {\n            trade = new Trade(route, inputAmount, exactIn ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT);\n          } catch (e) {\n            if (e instanceof InsufficientReservesError) {\n              setSwapButtonState(false);\n              setSwapButtonContent(\"Insufficient liquidity for this trade\");\n              console.log(\"Insufficient reserve!\");\n              return new ACYSwapErrorStatus(\"Insufficient reserve!\");\n            } else {\n              setSwapButtonState(false);\n              setSwapButtonContent(\"Unhandled exception!\");\n              console.log(\"Unhandled exception!\");\n              console.log(e);\n              return new ACYSwapErrorStatus(\"Unhandled exception!\");\n            }\n          }\n\n          console.log(trade);\n          setTrade(trade);\n          console.log(\"------------------ SLIPPAGE CALCULATE ------------------\");\n          let slippageAdjustedAmount;\n          let minAmountOut;\n          let maxAmountIn; // calculate slippage adjusted amount\n\n          if (exactIn) {\n            // console.log(trade.outputAmount.toExact());\n            // setToken1Amount(trade.outputAmount.toExact());\n            console.log(`By algorithm, expected to get: ${trade.outputAmount.toExact()}`); // if provided exact token in, we want to know min out token amount\n\n            minAmountOut = trade.minimumAmountOut(allowedSlippage);\n            slippageAdjustedAmount = minAmountOut.raw.toString(); // update UI with estimated output token amount\n\n            setToken1Amount(trade.outputAmount.toExact());\n            console.log(`Minimum received: ${slippageAdjustedAmount}`);\n          } else {\n            console.log(`By algorithm, expected to get: ${trade.inputAmount.toExact()}`);\n            maxAmountIn = trade.maximumAmountIn(allowedSlippage);\n            slippageAdjustedAmount = maxAmountIn.raw.toString();\n            setToken0Amount(trade.inputAmount.toExact());\n            console.log(`Maximum pay: ${slippageAdjustedAmount}`);\n          }\n\n          setSlippageAdjustedAmount(slippageAdjustedAmount);\n          setMinAmountOut(minAmountOut);\n          setMaxAmountIn(maxAmountIn);\n          let userToken0Balance = await getUserTokenBalanceRaw(token0IsETH ? ETHER : new Token(chainId, inToken0Address, inToken0Decimal, inToken0Symbol), account, library);\n          let userHasSufficientBalance;\n\n          try {\n            userHasSufficientBalance = userToken0Balance.gte(parseUnits(inToken0Amount, inToken0Decimal));\n          } catch (e) {\n            console.log(\"wrappedAmount!!!\");\n            console.log(e);\n            setSwapButtonState(false);\n            setSwapButtonContent(e.fault);\n            return new ACYSwapErrorStatus(e.fault);\n          } // quit if user doesn't have enough balance, otherwise this will cause error\n\n\n          if (!userHasSufficientBalance) {\n            setSwapButtonState(false);\n            setSwapButtonContent(\"Not Enough balance\");\n            return;\n          }\n\n          console.log(\"------------------ BREAKDOWN ------------------\");\n          let {\n            priceImpactWithoutFee,\n            realizedLPFee\n          } = computeTradePriceBreakdown(trade);\n          let breakdownInfo = [// `Slice Slippage tolerance:` ${allowedSlippage} %`\n          `Slippage tolerance : ${slippage}%`, `Price impact : ${priceImpactWithoutFee.toFixed(2)}%`, `LP FEE : ${realizedLPFee === null || realizedLPFee === void 0 ? void 0 : realizedLPFee.toSignificant(6)} ${trade.inputAmount.currency.symbol}`, `${exactIn ? \"Min received:\" : \"Max sold\"} : ${exactIn ? minAmountOut.toSignificant(4) : maxAmountIn.toSignificant(4)} ${exactIn ? trade.outputAmount.currency.symbol : trade.inputAmount.currency.symbol}`]; // setEstimatedStatus(\"you can click the swap button\");\n\n          setSwapBreakdown(breakdownInfo);\n          console.log(\"------------------ ALLOWANCE ------------------\");\n\n          if (!token0IsETH) {\n            let allowance = await getAllowance(inToken0Address, account, ROUTER_ADDRESS, library, account);\n            console.log(`Current allowance for ${trade.inputAmount.currency.symbol}:`);\n            console.log(allowance);\n            let token0AmountToApprove = exactIn ? inputAmount.raw.toString() : slippageAdjustedAmount;\n            let token0approval = await checkTokenIsApproved(inToken0Address, token0AmountToApprove, library, account);\n            console.log(token0approval);\n\n            if (!token0approval) {\n              console.log(\"Not enough allowance\");\n              setApproveAmount(token0AmountToApprove); // when needApprove = true, please show the button of [Approve]\n\n              setNeedApprove(true);\n              setApproveButtonStatus(true);\n              setSwapButtonState(false);\n              setSwapButtonContent(\"need approve\");\n              return \"approve is ok\";\n            } else {\n              setSwapButtonContent(\"swap\");\n              setSwapButtonState(true);\n              return \"swap is ok\";\n            }\n          }\n\n          setSwapButtonContent(\"swap\");\n          setSwapButtonState(true);\n          return \"swap is ok\";\n        }\n  })();\n\n  if (status instanceof ACYSwapErrorStatus) {\n    console.log(status.getErrorText());\n  } else {\n    console.log(status);\n  }\n\n  return;\n}\nexport async function swap(inputToken0, inputToken1, allowedSlippage = INITIAL_ALLOWED_SLIPPAGE, exactIn = true, chainId, library, account, pair, route, trade, slippageAdjustedAmount, minAmountOut, maxAmountIn, wethContract, wrappedAmount, setSwapStatus) {\n  let status = await (async () => {\n    // check uniswap\n    console.log(FACTORY_ADDRESS); // change slippage from bips (0.01%) into percentage\n\n    allowedSlippage = new Percent(allowedSlippage, 10000);\n    let contract = getRouterContract(library, account);\n    let {\n      address: inToken0Address,\n      symbol: inToken0Symbol,\n      decimal: inToken0Decimal,\n      amount: inToken0Amount\n    } = inputToken0;\n    let {\n      address: inToken1Address,\n      symbol: inToken1Symbol,\n      decimal: inToken1Decimal,\n      amount: inToken1Amount\n    } = inputToken1;\n    console.log(`token0Amount: ${inToken0Amount}`);\n    console.log(`token1Amount: ${inToken1Amount}`);\n    let token0IsETH = inToken0Symbol === \"ETH\";\n    let token1IsETH = inToken1Symbol === \"ETH\";\n    console.log(inputToken0);\n    console.log(inputToken1);\n    if (token0IsETH && token1IsETH) return new ACYSwapErrorStatus(\"Doesn't support ETH to ETH\");\n    console.log(\"------------------ WRAP OR SWAP  ------------------\"); // if one is ETH and other WETH, use WETH contract's deposit and withdraw\n    // wrap ETH into WETH\n\n    if (token0IsETH && inToken1Symbol === \"WETH\") {\n      console.log(\"WRAP\"); // UI should sync value of ETH and WETH\n      // if (exactIn) setToken1Amount(token0Amount);\n      // else setToken0Amount(token1Amount);\n\n      let result = await wethContract.deposit({\n        value: wrappedAmount\n      }).catch(e => {\n        console.log(e);\n        return new ACYSwapErrorStatus(\"WETH Deposit failed\");\n      });\n      return result;\n    } // unwrap WETH into ETH\n    else if (inToken0Symbol === \"WETH\" && token1IsETH) {\n        console.log(\"UNWRAP\"); // UI should sync value of ETH and WETH\n        // if (exactIn) setToken1Amount(token0Amount);\n        // else setToken0Amount(token1Amount);\n\n        let result = await wethContract.withdraw(wrappedAmount).catch(e => {\n          console.log(e);\n          return new ACYSwapErrorStatus(\"WETH Withdrawal failed\");\n        });\n        return result;\n      } // ETH <-> Non-WETH ERC20     OR     Non-WETH ERC20 <-> Non-WETH ERC20\n      else {\n          console.log(\"SWAP\");\n          console.log(\"------------------ CONSTRUCT TOKEN ------------------\"); // use WETH for ETHER to work with Uniswap V2 SDK\n\n          const token0 = token0IsETH ? WETH[chainId] : new Token(chainId, inToken0Address, inToken0Decimal, inToken0Symbol);\n          const token1 = token1IsETH ? WETH[chainId] : new Token(chainId, inToken1Address, inToken1Decimal, inToken1Symbol);\n          console.log(token0);\n          console.log(token1); // quit if the two tokens are equivalent, i.e. have the same chainId and address\n\n          if (token0.equals(token1)) return new ACYSwapErrorStatus(\"Equal tokens!\"); // helper function from uniswap sdk to get pair address, probably needed if want to replace fetchPairData\n          // get pair using our own provider\n\n          console.log(\"------------------ CONSTRUCT PAIR ------------------\");\n          console.log(\"FETCH\");\n          console.log(pair);\n          console.log(\"------------------ CONSTRUCT ROUTE ------------------\"); // This is where we let Uniswap SDK know we are not using WETH but ETHER\n\n          console.log(route);\n          console.log(\"------------------ PARSE AMOUNT ------------------\");\n          console.log(\"------------------ CONSTRUCT TRADE ------------------\");\n          console.log(trade);\n          console.log(\"------------------ SLIPPAGE CALCULATE ------------------\");\n          console.log(slippageAdjustedAmount);\n          console.log(minAmountOut);\n          console.log(maxAmountIn);\n          console.log(\"------------------ ALLOWANCE ------------------\");\n          console.log(\"say something about allowance\");\n          console.log(\"------------------ PREPARE SWAP ------------------\");\n          let {\n            methodName,\n            args,\n            value\n          } = Router.swapCallParameters(trade, {\n            feeOnTransfer: false,\n            allowedSlippage,\n            recipient: account,\n            ttl: 60\n          });\n          const options = !value || isZero(value) ? {} : {\n            value\n          };\n          console.log(\"------------------ ARGUMENTS ------------------\");\n          console.log(options);\n          console.log(args);\n          let result = await contract.estimateGas[methodName](...args, options).then(gasEstimate => {\n            return contract[methodName](...args, {\n              gasLimit: calculateGasMargin(gasEstimate),\n              ...options\n            });\n          }).catch(e => {\n            return new ACYSwapErrorStatus(`${methodName} failed with error ${e}`);\n          });\n          return result;\n        }\n  })();\n\n  if (status instanceof ACYSwapErrorStatus) {\n    setSwapStatus(status.getErrorText());\n  } else {\n    console.log(status);\n    let url = \"https://rinkeby.etherscan.io/tx/\" + status.hash;\n    setSwapStatus( /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: url,\n        target: \"_blank\",\n        children: \"view it on etherscan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 28\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 709,\n      columnNumber: 23\n    }, this));\n  }\n}\n\nconst SwapComponent = () => {\n  _s();\n\n  let [token0, setToken0] = useState(null);\n  let [token1, setToken1] = useState(null);\n  let [token0Balance, setToken0Balance] = useState(\"not know yet\");\n  let [token1Balance, setToken1Balance] = useState(\"not know yet\");\n  let [token0BalanceShow, setToken0BalanceShow] = useState(false);\n  let [token1BalanceShow, setToken1BalanceShow] = useState(false);\n  let [token0Amount, setToken0Amount] = useState();\n  let [token1Amount, setToken1Amount] = useState();\n  let [slippageTolerance, setSlippageTolerance] = useState(INITIAL_ALLOWED_SLIPPAGE / 100); //exactIn = true 在第一行输入\n  //exactIn = false 在第二行输入\n\n  let [exactIn, setExactIn] = useState(true);\n  let [needApprove, setNeedApprove] = useState(false);\n  let [approveAmount, setApproveAmount] = useState(\"0\");\n  let [approveButtonStatus, setApproveButtonStatus] = useState(true); // Breakdown shows the estimated information for swap\n  // let [estimatedStatus,setEstimatedStatus]=useState();\n\n  let [swapBreakdown, setSwapBreakdown] = useState();\n  let [swapButtonState, setSwapButtonState] = useState(true);\n  let [swapButtonContent, setSwapButtonContent] = useState(\"Connect to Wallet\");\n  let [swapStatus, setSwapStatus] = useState();\n  let [pair, setPair] = useState();\n  let [route, setRoute] = useState();\n  let [trade, setTrade] = useState();\n  let [slippageAdjustedAmount, setSlippageAdjustedAmount] = useState();\n  let [minAmountOut, setMinAmountOut] = useState();\n  let [maxAmountIn, setMaxAmountIn] = useState();\n  let [wethContract, setWethContract] = useState();\n  let [wrappedAmount, setWrappedAmount] = useState();\n  const individualFieldPlaceholder = \"Enter amount\";\n  const dependentFieldPlaceholder = \"Estimated value\";\n  const slippageTolerancePlaceholder = \"please input a number from 1.00 to 100.00\";\n  const {\n    account,\n    chainId,\n    library,\n    activate\n  } = useWeb3React();\n  const injected = new InjectedConnector({\n    supportedChainIds: [1, 3, 4, 5, 42, 80001]\n  }); // This is to connect wallet.\n\n  useEffect(() => {// activate(injected);\n  }, []); // token1Amount is changed according to token0Amount\n\n  let t0Changed = useCallback(async () => {\n    if (!token0 || !token1) return;\n    if (!exactIn) return;\n    await swapGetEstimated({ ...token0,\n      amount: token0Amount\n    }, { ...token1,\n      amount: token1Amount\n    }, slippageTolerance * 100, exactIn, chainId, library, account, setToken0Amount, setToken1Amount, setNeedApprove, setApproveAmount, setApproveButtonStatus, setSwapBreakdown, setSwapButtonState, setSwapButtonContent, setSwapStatus, setPair, setRoute, setTrade, setSlippageAdjustedAmount, setMinAmountOut, setMaxAmountIn, setWethContract, setWrappedAmount);\n  }, [token0, token1, token0Amount, token1Amount, slippageTolerance, exactIn, chainId, library, account]); // token0Amount is changed according to token1Amount\n\n  let t1Changed = useCallback(async () => {\n    if (!token0 || !token1) return;\n    if (exactIn) return;\n    await swapGetEstimated({ ...token0,\n      amount: token0Amount\n    }, { ...token1,\n      amount: token1Amount\n    }, slippageTolerance * 100, exactIn, chainId, library, account, setToken0Amount, setToken1Amount, setNeedApprove, setApproveAmount, setApproveButtonStatus, setSwapBreakdown, setSwapButtonState, setSwapButtonContent, setSwapStatus, setPair, setRoute, setTrade, setSlippageAdjustedAmount, setMinAmountOut, setMaxAmountIn, setWethContract, setWrappedAmount);\n  }, [token0, token1, token0Amount, token1Amount, slippageTolerance, exactIn, chainId, library, account]);\n  useEffect(() => {\n    t0Changed();\n  }, [token0, token1, token0Amount, token1Amount, slippageTolerance, exactIn, chainId, library, account]);\n  useEffect(() => {\n    t1Changed();\n  }, [token0, token1, token0Amount, token1Amount, slippageTolerance, exactIn, chainId, library, account]);\n  useEffect(() => {\n    if (account == undefined) {\n      setSwapButtonState(true);\n      setSwapButtonContent(\"Connect to Wallet\");\n    } else {\n      setSwapButtonState(false);\n      setSwapButtonContent(\"choose tokens and amount\");\n    }\n  }, [account]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"swap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 858,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"success\",\n      children: [/*#__PURE__*/_jsxDEV(Alert.Heading, {\n        children: \"Hey, nice to see you\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 860,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: account\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 861,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 859,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formBasicEmail\",\n        children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n          children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n            variant: \"success\",\n            id: \"dropdown-basic\",\n            children: token0 && token0.symbol || \"In token\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 866,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n            children: supportedTokens.map((token, index) => /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              onClick: async () => {\n                if (account == undefined) {\n                  alert(\"please connect to your account\");\n                } else {\n                  setToken0(token);\n                  setToken0Balance(await getUserTokenBalance(token, chainId, account, library));\n                  setToken0BalanceShow(true);\n                }\n              },\n              children: token.symbol\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 871,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 869,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 865,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          value: token0Amount,\n          placeholder: exactIn ? individualFieldPlaceholder : dependentFieldPlaceholder,\n          onFocus: e => {\n            setExactIn(true);\n          },\n          onChange: e => {\n            setToken0Amount(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 896,\n          columnNumber: 21\n        }, this), token0BalanceShow ? /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [\"Balance: \", token0Balance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 909,\n          columnNumber: 42\n        }, this) : /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"not know yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 909,\n          columnNumber: 84\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 864,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formBasicPassword\",\n        children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n          children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n            variant: \"success\",\n            id: \"dropdown-basic\",\n            children: token1 && token1.symbol || \"Out token\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 913,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n            children: supportedTokens.map((token, index) => /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              onClick: async () => {\n                if (account == undefined) {\n                  alert(\"please connect to your account\");\n                } else {\n                  setToken1(token);\n                  setToken1Balance(await getUserTokenBalance(token, chainId, account, library));\n                  setToken1BalanceShow(true);\n                }\n              },\n              children: token.symbol\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 918,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 916,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 912,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          value: token1Amount,\n          placeholder: exactIn ? dependentFieldPlaceholder : individualFieldPlaceholder,\n          onFocus: e => {\n            setExactIn(false);\n          },\n          onChange: e => {\n            setToken1Amount(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 942,\n          columnNumber: 21\n        }, this), token1BalanceShow ? /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [\"Balance: \", token1Balance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 954,\n          columnNumber: 42\n        }, this) : /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"not know yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 954,\n          columnNumber: 84\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 911,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n        size: \"sm\",\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(InputGroup.Text, {\n          id: \"inputGroup-sizing-sm\",\n          children: \"Slippage tolerance \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 959,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          \"aria-label\": \"Small\",\n          \"aria-describedby\": \"inputGroup-sizing-sm\",\n          placeholder: slippageTolerancePlaceholder,\n          onChange: e => {\n            setSlippageTolerance(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 960,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(InputGroup.Text, {\n          children: \"%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 969,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 958,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"danger\",\n        children: [\"the Slippage Tolerance you choose is [ \", slippageTolerance, \"% ]\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 972,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"info\",\n        children: [swapBreakdown && /*#__PURE__*/_jsxDEV(\"mark\", {\n          children: \" Swap breakdown:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 977,\n          columnNumber: 39\n        }, this), swapBreakdown && swapBreakdown.map(info => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: info\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 978,\n          columnNumber: 67\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 976,\n        columnNumber: 17\n      }, this), needApprove == true && /*#__PURE__*/_jsxDEV(\"mark\", {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"warning\",\n          onClick: async () => {\n            let state = await approve(token0.address, approveAmount, library, account);\n\n            if (state == true) {\n              setSwapButtonState(true);\n              setSwapButtonContent(\"SWAP\");\n              setApproveButtonStatus(false);\n            }\n          },\n          disabled: !approveButtonStatus,\n          children: \"Approve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 982,\n          columnNumber: 25\n        }, this), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 981,\n        columnNumber: 44\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"success\",\n        disabled: !swapButtonState,\n        onClick: () => {\n          if (account == undefined) {\n            activate(injected);\n          } else {\n            swap({ ...token0,\n              amount: token0Amount\n            }, { ...token1,\n              amount: token1Amount\n            }, slippageTolerance * 100, exactIn, chainId, library, account, pair, route, trade, slippageAdjustedAmount, minAmountOut, maxAmountIn, wethContract, wrappedAmount, setSwapStatus);\n          }\n        },\n        children: swapButtonContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1002,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"primary\",\n        children: [swapStatus && /*#__PURE__*/_jsxDEV(\"mark\", {\n          children: \" swapStatus:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1043,\n          columnNumber: 37\n        }, this), swapStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", swapStatus]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1044,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1042,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 863,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 857,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SwapComponent, \"Rp/RMnV1yQPeB6TEDPNPpj8keO4=\", false, function () {\n  return [useWeb3React];\n});\n\n_c = SwapComponent;\nexport default SwapComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"SwapComponent\");","map":{"version":3,"sources":["D:/GitHub/acy-dex-swap/src/components/SwapComponent.js"],"names":["useWeb3React","InjectedConnector","useCallback","useEffect","useState","ACYSwapErrorStatus","approve","calculateGasMargin","checkTokenIsApproved","computeTradePriceBreakdown","getAllowance","getContract","getRouterContract","getUserTokenBalance","getUserTokenBalanceRaw","INITIAL_ALLOWED_SLIPPAGE","isZero","ROUTER_ADDRESS","supportedTokens","Alert","Button","Dropdown","Form","FormControl","InputGroup","WETHABI","CurrencyAmount","ETHER","FACTORY_ADDRESS","Fetcher","InsufficientReservesError","Pair","Percent","Route","Router","Token","TokenAmount","Trade","TradeType","WETH","BigNumber","parseUnits","swapGetEstimated","inputToken0","inputToken1","allowedSlippage","exactIn","chainId","library","account","setToken0Amount","setToken1Amount","setNeedApprove","setApproveAmount","setApproveButtonStatus","setSwapBreakdown","setSwapButtonState","setSwapButtonContent","setSwapStatus","setPair","setRoute","setTrade","setSlippageAdjustedAmount","setMinAmountOut","setMaxAmountIn","setWethContract","setWrappedAmount","status","console","log","slippage","contract","address","inToken0Address","symbol","inToken0Symbol","decimal","inToken0Decimal","amount","inToken0Amount","inToken1Address","inToken1Symbol","inToken1Decimal","inToken1Amount","isNaN","parseFloat","token0IsETH","token1IsETH","userToken0Balance","userHasSufficientBalance","gte","e","fault","wethContract","wrappedAmount","from","toHexString","token0","token1","equals","pair","fetchPairData","catch","route","parsedAmount","raw","toString","inputAmount","dependentTokenAmount","priceOf","quote","parsed","ether","toExact","trade","EXACT_INPUT","EXACT_OUTPUT","slippageAdjustedAmount","minAmountOut","maxAmountIn","outputAmount","minimumAmountOut","maximumAmountIn","priceImpactWithoutFee","realizedLPFee","breakdownInfo","toFixed","toSignificant","currency","allowance","token0AmountToApprove","token0approval","getErrorText","swap","result","deposit","value","withdraw","methodName","args","swapCallParameters","feeOnTransfer","recipient","ttl","options","estimateGas","then","gasEstimate","gasLimit","url","hash","SwapComponent","setToken0","setToken1","token0Balance","setToken0Balance","token1Balance","setToken1Balance","token0BalanceShow","setToken0BalanceShow","token1BalanceShow","setToken1BalanceShow","token0Amount","token1Amount","slippageTolerance","setSlippageTolerance","setExactIn","needApprove","approveAmount","approveButtonStatus","swapBreakdown","swapButtonState","swapButtonContent","swapStatus","individualFieldPlaceholder","dependentFieldPlaceholder","slippageTolerancePlaceholder","activate","injected","supportedChainIds","t0Changed","t1Changed","undefined","map","token","index","alert","target","info","state"],"mappings":"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","sourcesContent":["import {useWeb3React} from \"@web3-react/core\";\r\nimport {InjectedConnector} from \"@web3-react/injected-connector\";\r\nimport {useCallback, useEffect, useState} from \"react\";\r\nimport {\r\n    ACYSwapErrorStatus,\r\n    approve,\r\n    calculateGasMargin,\r\n    checkTokenIsApproved,\r\n    computeTradePriceBreakdown,\r\n    getAllowance,\r\n    getContract,\r\n    getRouterContract,\r\n    getUserTokenBalance,\r\n    getUserTokenBalanceRaw,\r\n    INITIAL_ALLOWED_SLIPPAGE,\r\n    isZero,\r\n    ROUTER_ADDRESS,\r\n    supportedTokens,\r\n} from \"../utils\";\r\n\r\nimport {Alert, Button, Dropdown, Form, FormControl, InputGroup} from \"react-bootstrap\";\r\n\r\nimport WETHABI from \"../abis/WETH.json\";\r\n\r\nimport {\r\n    CurrencyAmount,\r\n    ETHER,\r\n    FACTORY_ADDRESS,\r\n    Fetcher,\r\n    InsufficientReservesError,\r\n    Pair,\r\n    Percent,\r\n    Route,\r\n    Router,\r\n    Token,\r\n    TokenAmount,\r\n    Trade,\r\n    TradeType,\r\n    WETH,\r\n} from \"@uniswap/sdk\";\r\n\r\nimport {BigNumber} from \"@ethersproject/bignumber\";\r\nimport {parseUnits} from \"@ethersproject/units\";\r\n\r\n// get the estimated amount  of the other token required when swapping, in readable string.\r\nexport async function swapGetEstimated(\r\n    inputToken0,\r\n    inputToken1,\r\n    allowedSlippage = INITIAL_ALLOWED_SLIPPAGE,\r\n    exactIn = true,\r\n    chainId,\r\n    library,\r\n    account,\r\n    setToken0Amount,\r\n    setToken1Amount,\r\n    setNeedApprove,\r\n    setApproveAmount,\r\n    setApproveButtonStatus,\r\n    setSwapBreakdown,\r\n    setSwapButtonState,\r\n    setSwapButtonContent,\r\n    setSwapStatus,\r\n    setPair,\r\n    setRoute,\r\n    setTrade,\r\n    setSlippageAdjustedAmount,\r\n    setMinAmountOut,\r\n    setMaxAmountIn,\r\n    setWethContract,\r\n    setWrappedAmount\r\n)\r\n{\r\n    let status = await (async () => {\r\n        // check uniswap\r\n        console.log(FACTORY_ADDRESS);\r\n        // change slippage from bips (0.01%) into percentage\r\n        let slippage = allowedSlippage * 0.01;\r\n        allowedSlippage = new Percent(allowedSlippage, 10000);\r\n        setSwapBreakdown(\"\");\r\n        setSwapButtonState(false);\r\n        setSwapButtonContent(\"loading...\");\r\n        setSwapStatus(\"\");\r\n\r\n        let contract = getRouterContract(library, account);\r\n        let {\r\n            address: inToken0Address,\r\n            symbol: inToken0Symbol,\r\n            decimal: inToken0Decimal,\r\n            amount: inToken0Amount,\r\n        } = inputToken0;\r\n        let {\r\n            address: inToken1Address,\r\n            symbol: inToken1Symbol,\r\n            decimal: inToken1Decimal,\r\n            amount: inToken1Amount,\r\n        } = inputToken1;\r\n\r\n        if (!inputToken0.symbol || !inputToken1.symbol)\r\n            return new ACYSwapErrorStatus(\"please choose tokens\");\r\n        if (exactIn && inToken0Amount == \"0\")\r\n            return new ACYSwapErrorStatus(\"token0Amount is 0\");\r\n        if (!exactIn && inToken1Amount == \"0\")\r\n            return new ACYSwapErrorStatus(\"token1Amount is 0\");\r\n        if(exactIn && inToken0Amount == \"\")\r\n            return new ACYSwapErrorStatus(\"token0Amount is \\\"\\\"\");\r\n        if(!exactIn && inToken1Amount==\"\")\r\n            return new ACYSwapErrorStatus(\"token1Amount is \\\"\\\"\");\r\n        if (exactIn && (isNaN(parseFloat(inToken0Amount))))\r\n            return new ACYSwapErrorStatus(\"token0Amount is NaN\");\r\n        if (!exactIn && (isNaN(parseFloat(inToken1Amount))))\r\n            return new ACYSwapErrorStatus(\"token1Amount is NaN\");\r\n\r\n        console.log(`token0Amount: ${inToken0Amount}`);\r\n        console.log(`token1Amount: ${inToken1Amount}`);\r\n\r\n        let token0IsETH = inToken0Symbol === \"ETH\";\r\n        let token1IsETH = inToken1Symbol === \"ETH\";\r\n\r\n        console.log(inputToken0);\r\n        console.log(inputToken1);\r\n\r\n        if (token0IsETH && token1IsETH) {\r\n            setSwapButtonState(false);\r\n            setSwapButtonContent(\"don't support ETH to ETH\");\r\n            return new ACYSwapErrorStatus(\"don't support ETH to ETH\");\r\n        }\r\n            // if one is ETH and other WETH, use WETH contract's deposit and withdraw\r\n        // wrap ETH into WETH\r\n        else if (token0IsETH && inToken1Symbol === \"WETH\") {\r\n            // UI should sync value of ETH and WETH\r\n            if (exactIn) {\r\n                setToken1Amount(inToken0Amount);\r\n                inToken1Amount=inToken0Amount;\r\n            }\r\n            else {\r\n                setToken0Amount(inToken1Amount);\r\n                inToken0Amount=inToken1Amount;\r\n            }\r\n            console.log(\"------------------ CHECK BALANCE ------------------\");\r\n            // Big Number comparison\r\n\r\n            let userToken0Balance = await getUserTokenBalanceRaw(\r\n                token0IsETH\r\n                    ? ETHER\r\n                    : new Token(chainId, inToken0Address, inToken0Decimal, inToken0Symbol),\r\n                account,\r\n                library\r\n            );\r\n\r\n            let userHasSufficientBalance;\r\n            try {\r\n                userHasSufficientBalance = userToken0Balance.gte(\r\n                    parseUnits(inToken0Amount, inToken0Decimal)\r\n                );\r\n            }catch(e){\r\n                console.log(\"this is wrong!\");\r\n                console.log(e);\r\n                setSwapButtonState(false);\r\n                if(e.fault===\"underflow\") setSwapButtonContent(e.fault);\r\n                else setSwapButtonContent(\"unknow error\");\r\n                return new ACYSwapErrorStatus(e.fault);\r\n            };\r\n\r\n\r\n\r\n            console.log(userToken0Balance);\r\n            console.log(\"token0Amount\");\r\n            console.log(inToken0Amount);\r\n\r\n            // quit if user doesn't have enough balance, otherwise this will cause error\r\n            if (!userHasSufficientBalance) {\r\n                setSwapButtonState(false);\r\n                setSwapButtonContent(\"NOT enough balance\");\r\n                return new ACYSwapErrorStatus(\"NOT enough balance\");\r\n            }\r\n            // setEstimatedStatus(\"change ETH to WETH\");\r\n            setSwapButtonState(true);\r\n            setSwapButtonContent(\"wrap\");\r\n\r\n            const wethContract = getContract(inToken1Address, WETHABI, library, account);\r\n            let wrappedAmount;\r\n\r\n            try{\r\n                wrappedAmount = BigNumber.from(\r\n                    parseUnits(inToken0Amount, inToken0Decimal)\r\n                ).toHexString();\r\n            }catch(e){\r\n                console.log(\"wrappedAmount!!\");\r\n                console.log(e);\r\n                setSwapButtonState(false);\r\n                if(e.fault===\"underflow\") {\r\n                    setSwapButtonContent(e.fault);\r\n                    return new ACYSwapErrorStatus(e.fault);\r\n                }else{\r\n                    setSwapButtonContent(\"unknow error\");\r\n                    return new ACYSwapErrorStatus(\"unknow error\");\r\n                }\r\n\r\n            };\r\n\r\n\r\n            setWethContract(wethContract);\r\n            setWrappedAmount(wrappedAmount);\r\n\r\n            // let result = await wethContract\r\n            //     .deposit({\r\n            //         value: wrappedAmount,\r\n            //     })\r\n            //     .catch((e) => {\r\n            //         console.log(e);\r\n            //         return new ACYSwapErrorStatus(\"WETH Deposit failed\");\r\n            //     });\r\n            // return result;\r\n            return \"Wrap is ok\";\r\n        }\r\n        else if (inToken0Symbol === \"WETH\" && token1IsETH) {\r\n            console.log(\"UNWRAP\");\r\n            if (exactIn) {\r\n                setToken1Amount(inToken0Amount);\r\n                inToken1Amount=inToken0Amount;\r\n            }\r\n            else {\r\n                setToken0Amount(inToken1Amount);\r\n                inToken0Amount=inToken1Amount;\r\n            }\r\n\r\n            let userToken0Balance = await getUserTokenBalanceRaw(\r\n                token0IsETH\r\n                    ? ETHER\r\n                    : new Token(chainId, inToken0Address, inToken0Decimal, inToken0Symbol),\r\n                account,\r\n                library\r\n            );\r\n\r\n            let userHasSufficientBalance;\r\n            try{\r\n                userHasSufficientBalance = userToken0Balance.gte(\r\n                    parseUnits(inToken0Amount, inToken0Decimal)\r\n                );\r\n            }catch(e){\r\n                console.log(\"userHasSufficientBalance!!!\");\r\n                console.log(e);\r\n                setSwapButtonState(false);\r\n                if(e.fault===\"underflow\"){\r\n                    setSwapButtonContent(e.fault);\r\n                    return new ACYSwapErrorStatus(e.fault);\r\n                }else{\r\n                    setSwapButtonContent(\"unknow error\");\r\n                    return new ACYSwapErrorStatus(\"unknow error\");\r\n                }\r\n            };\r\n\r\n            // quit if user doesn't have enough balance, otherwise this will cause error\r\n            if (!userHasSufficientBalance) {\r\n                setSwapButtonState(false);\r\n                setSwapButtonContent(\"Not enough balance\");\r\n                return new ACYSwapErrorStatus(\"NOT enough balance\");\r\n            }\r\n\r\n            setSwapButtonState(true);\r\n            setSwapButtonContent(\"unwrap\");\r\n\r\n            const wethContract = getContract(inToken0Address, WETHABI, library, account);\r\n\r\n            let wrappedAmount;\r\n            try{\r\n                wrappedAmount = BigNumber.from(\r\n                    parseUnits(inToken0Amount, inToken0Decimal)\r\n                ).toHexString();\r\n            }catch(e){\r\n                console.log(\"wrappedAmount!!!\");\r\n                console.log(e);\r\n                setSwapButtonState(false);\r\n                if(e.fault===\"underflow\") {\r\n                    setSwapButtonContent(e.fault);\r\n                    return new ACYSwapErrorStatus(e.fault);\r\n                }else{\r\n                    setSwapButtonContent(\"unknow error\");\r\n                    return new ACYSwapErrorStatus(\"unknow error\");\r\n                }\r\n            }\r\n            setWethContract(wethContract);\r\n            setWrappedAmount(wrappedAmount);\r\n\r\n            // let result = await wethContract.withdraw(wrappedAmount).catch((e) => {\r\n            //     console.log(e);\r\n            //     return new ACYSwapErrorStatus(\"WETH Withdrawal failed\");\r\n            // });\r\n            // return result;\r\n\r\n            return \"unwrap is ok\";\r\n        }\r\n        // ETH <-> Non-WETH ERC20     OR     Non-WETH ERC20 <-> Non-WETH ERC20\r\n        else {\r\n            console.log(\"SWAP\");\r\n            console.log(\"------------------ CONSTRUCT TOKEN ------------------\");\r\n            // use WETH for ETHER to work with Uniswap V2 SDK\r\n            const token0 = token0IsETH\r\n                ? WETH[chainId]\r\n                : new Token(chainId, inToken0Address, inToken0Decimal, inToken0Symbol);\r\n            const token1 = token1IsETH\r\n                ? WETH[chainId]\r\n                : new Token(chainId, inToken1Address, inToken1Decimal, inToken1Symbol);\r\n\r\n            if (token0.equals(token1)) {\r\n                setSwapButtonState(false);\r\n                setSwapButtonContent(\"tokens are same\");\r\n                return new ACYSwapErrorStatus(\"tokens are same\");\r\n            }\r\n            // get pair using our own provider\r\n            const pair = await Fetcher.fetchPairData(token0, token1, library).catch(\r\n                (e) => {\r\n                    return new ACYSwapErrorStatus(\r\n                        `${token0.symbol} - ${token1.symbol} pool does not exist. Create one?`\r\n                    );\r\n                }\r\n            );\r\n            if (pair instanceof ACYSwapErrorStatus) {\r\n                setSwapButtonState(false);\r\n                setSwapButtonContent(\"pool doesn't exist\");\r\n                return pair;\r\n            }\r\n\r\n            console.log(pair);\r\n            setPair(pair);\r\n            console.log(\"------------------ CONSTRUCT ROUTE ------------------\");\r\n            // This is where we let Uniswap SDK know we are not using WETH but ETHER\r\n\r\n            const route = new Route(\r\n                [pair],\r\n                token0IsETH ? ETHER : token0,\r\n                token1IsETH ? ETHER : token1\r\n            );\r\n\r\n            console.log(route);\r\n\r\n            setRoute(route);\r\n            console.log(\"------------------ PARSE AMOUNT ------------------\");\r\n\r\n            // convert typed in amount to BigNumbe rusing ethers.js's parseUnits then to string,\r\n            console.log(inToken0Amount);\r\n            console.log(inToken0Decimal);\r\n\r\n            let parsedAmount;\r\n\r\n            try{\r\n                parsedAmount = exactIn\r\n                    ? new TokenAmount(\r\n                        token0,\r\n                        parseUnits(inToken0Amount, inToken0Decimal)\r\n                    ).raw.toString(16)\r\n                    : new TokenAmount(\r\n                        token1,\r\n                        parseUnits(inToken1Amount, inToken1Decimal)\r\n                    ).raw.toString(16);\r\n            }catch(e){\r\n                console.log(\"parsedAmount!!!\");\r\n                console.log(e);\r\n                setSwapButtonState(false);\r\n                if(e.fault===\"underflow\") {\r\n                    setSwapButtonContent(e.fault);\r\n                    return new ACYSwapErrorStatus(e.fault);\r\n                }else{\r\n                    setSwapButtonContent(\"unknow error\");\r\n                    return new ACYSwapErrorStatus(\"unknow error\");\r\n                }\r\n            }\r\n\r\n            let inputAmount;\r\n            // CurrencyAmount instance is required for Trade contructor if input is ETHER\r\n            if ((token0IsETH && exactIn) || (token1IsETH && !exactIn)) {\r\n                inputAmount = new CurrencyAmount(ETHER, `0x${parsedAmount}`);\r\n            } else {\r\n                inputAmount = new TokenAmount(\r\n                    exactIn ? token0 : token1,\r\n                    `0x${parsedAmount}`\r\n                );\r\n            }\r\n            console.log(\"estimated dependent amount\");\r\n            // console.log(pair.priceOf(token0).quote(inputAmount).raw.toString());\r\n            let dependentTokenAmount = pair\r\n                .priceOf(token0)\r\n                .quote(new TokenAmount(token0, inputAmount.raw));\r\n\r\n            let parsed =\r\n                token1 === ETHER\r\n                    ? CurrencyAmount.ether(dependentTokenAmount.raw)\r\n                    : dependentTokenAmount;\r\n            console.log(parsed.toExact());\r\n\r\n//===================================================================================\r\n\r\n            console.log(\"------------------ CONSTRUCT TRADE ------------------\");\r\n            let trade;\r\n            try {\r\n                trade = new Trade(\r\n                    route,\r\n                    inputAmount,\r\n                    exactIn ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT\r\n                );\r\n            } catch (e) {\r\n                if (e instanceof InsufficientReservesError) {\r\n                    setSwapButtonState(false);\r\n                    setSwapButtonContent(\"Insufficient liquidity for this trade\");\r\n                    console.log(\"Insufficient reserve!\");\r\n                    return new ACYSwapErrorStatus(\"Insufficient reserve!\");\r\n                } else {\r\n                    setSwapButtonState(false);\r\n                    setSwapButtonContent(\"Unhandled exception!\");\r\n                    console.log(\"Unhandled exception!\");\r\n                    console.log(e);\r\n                    return new ACYSwapErrorStatus(\"Unhandled exception!\");\r\n                }\r\n            }\r\n\r\n            console.log(trade);\r\n            setTrade(trade);\r\n            console.log(\"------------------ SLIPPAGE CALCULATE ------------------\");\r\n\r\n            let slippageAdjustedAmount;\r\n            let minAmountOut;\r\n            let maxAmountIn;\r\n\r\n            // calculate slippage adjusted amount\r\n            if (exactIn) {\r\n                // console.log(trade.outputAmount.toExact());\r\n                // setToken1Amount(trade.outputAmount.toExact());\r\n                console.log(\r\n                    `By algorithm, expected to get: ${trade.outputAmount.toExact()}`\r\n                );\r\n                // if provided exact token in, we want to know min out token amount\r\n                minAmountOut = trade.minimumAmountOut(allowedSlippage);\r\n                slippageAdjustedAmount = minAmountOut.raw.toString();\r\n\r\n                // update UI with estimated output token amount\r\n                setToken1Amount(trade.outputAmount.toExact());\r\n                console.log(`Minimum received: ${slippageAdjustedAmount}`);\r\n\r\n            } else {\r\n                console.log(\r\n                    `By algorithm, expected to get: ${trade.inputAmount.toExact()}`\r\n                );\r\n                maxAmountIn = trade.maximumAmountIn(allowedSlippage);\r\n                slippageAdjustedAmount = maxAmountIn.raw.toString();\r\n                setToken0Amount(trade.inputAmount.toExact());\r\n                console.log(`Maximum pay: ${slippageAdjustedAmount}`);\r\n            }\r\n\r\n\r\n            setSlippageAdjustedAmount(slippageAdjustedAmount);\r\n            setMinAmountOut(minAmountOut);\r\n            setMaxAmountIn(maxAmountIn);\r\n\r\n            let userToken0Balance = await getUserTokenBalanceRaw(\r\n                token0IsETH\r\n                    ? ETHER\r\n                    : new Token(chainId, inToken0Address, inToken0Decimal, inToken0Symbol),\r\n                account,\r\n                library\r\n            );\r\n\r\n\r\n            let userHasSufficientBalance;\r\n            try{\r\n                userHasSufficientBalance = userToken0Balance.gte(\r\n                    parseUnits(inToken0Amount, inToken0Decimal)\r\n                );\r\n            }catch(e){\r\n                console.log(\"wrappedAmount!!!\");\r\n                console.log(e);\r\n                setSwapButtonState(false);\r\n                setSwapButtonContent(e.fault);\r\n                return new ACYSwapErrorStatus(e.fault);\r\n            }\r\n\r\n\r\n            // quit if user doesn't have enough balance, otherwise this will cause error\r\n            if (!userHasSufficientBalance) {\r\n                setSwapButtonState(false);\r\n                setSwapButtonContent(\"Not Enough balance\");\r\n                return;\r\n            }\r\n\r\n            console.log(\"------------------ BREAKDOWN ------------------\");\r\n            let {priceImpactWithoutFee, realizedLPFee} =\r\n                computeTradePriceBreakdown(trade);\r\n            let breakdownInfo = [\r\n                // `Slice Slippage tolerance:` ${allowedSlippage} %`\r\n                `Slippage tolerance : ${slippage}%`,\r\n                `Price impact : ${priceImpactWithoutFee.toFixed(2)}%`,\r\n                `LP FEE : ${realizedLPFee?.toSignificant(6)} ${\r\n                    trade.inputAmount.currency.symbol\r\n                }`,\r\n                `${exactIn ? \"Min received:\" : \"Max sold\"} : ${\r\n                    exactIn ? minAmountOut.toSignificant(4) : maxAmountIn.toSignificant(4)\r\n                } ${\r\n                    exactIn\r\n                        ? trade.outputAmount.currency.symbol\r\n                        : trade.inputAmount.currency.symbol\r\n                }`,\r\n            ];\r\n\r\n            // setEstimatedStatus(\"you can click the swap button\");\r\n            setSwapBreakdown(breakdownInfo);\r\n\r\n            console.log(\"------------------ ALLOWANCE ------------------\");\r\n            if (!token0IsETH) {\r\n                let allowance = await getAllowance(\r\n                    inToken0Address,\r\n                    account,\r\n                    ROUTER_ADDRESS,\r\n                    library,\r\n                    account\r\n                );\r\n\r\n                console.log(\r\n                    `Current allowance for ${trade.inputAmount.currency.symbol}:`\r\n                );\r\n                console.log(allowance);\r\n                let token0AmountToApprove = exactIn\r\n                    ? inputAmount.raw.toString()\r\n                    : slippageAdjustedAmount;\r\n                let token0approval = await checkTokenIsApproved(\r\n                    inToken0Address,\r\n                    token0AmountToApprove,\r\n                    library,\r\n                    account\r\n                );\r\n                console.log(token0approval);\r\n                if (!token0approval) {\r\n                    console.log(\"Not enough allowance\");\r\n                    setApproveAmount(token0AmountToApprove);\r\n                    // when needApprove = true, please show the button of [Approve]\r\n                    setNeedApprove(true);\r\n                    setApproveButtonStatus(true);\r\n                    setSwapButtonState(false);\r\n                    setSwapButtonContent(\"need approve\");\r\n                    return \"approve is ok\";\r\n                }else {\r\n                    setSwapButtonContent(\"swap\");\r\n                    setSwapButtonState(true);\r\n                    return \"swap is ok\";\r\n                }\r\n            }\r\n            setSwapButtonContent(\"swap\");\r\n            setSwapButtonState(true);\r\n\r\n\r\n            return \"swap is ok\";\r\n        }\r\n    })();\r\n    if (status instanceof ACYSwapErrorStatus) {\r\n        console.log(status.getErrorText());\r\n    } else {\r\n        console.log(status);\r\n    }\r\n    return;\r\n}\r\n\r\nexport async function swap(\r\n    inputToken0,\r\n    inputToken1,\r\n    allowedSlippage = INITIAL_ALLOWED_SLIPPAGE,\r\n    exactIn = true,\r\n    chainId,\r\n    library,\r\n    account,\r\n    pair,\r\n    route,\r\n    trade,\r\n    slippageAdjustedAmount,\r\n    minAmountOut,\r\n    maxAmountIn,\r\n    wethContract,\r\n    wrappedAmount,\r\n    setSwapStatus\r\n) {\r\n    let status = await (async () => {\r\n        // check uniswap\r\n        console.log(FACTORY_ADDRESS);\r\n        // change slippage from bips (0.01%) into percentage\r\n        allowedSlippage = new Percent(allowedSlippage, 10000);\r\n\r\n        let contract = getRouterContract(library, account);\r\n        let {\r\n            address: inToken0Address,\r\n            symbol: inToken0Symbol,\r\n            decimal: inToken0Decimal,\r\n            amount: inToken0Amount,\r\n        } = inputToken0;\r\n        let {\r\n            address: inToken1Address,\r\n            symbol: inToken1Symbol,\r\n            decimal: inToken1Decimal,\r\n            amount: inToken1Amount,\r\n        } = inputToken1;\r\n\r\n        console.log(`token0Amount: ${inToken0Amount}`);\r\n        console.log(`token1Amount: ${inToken1Amount}`);\r\n\r\n        let token0IsETH = inToken0Symbol === \"ETH\";\r\n        let token1IsETH = inToken1Symbol === \"ETH\";\r\n\r\n        console.log(inputToken0);\r\n        console.log(inputToken1);\r\n\r\n        if (token0IsETH && token1IsETH)\r\n            return new ACYSwapErrorStatus(\"Doesn't support ETH to ETH\");\r\n        console.log(\"------------------ WRAP OR SWAP  ------------------\");\r\n        // if one is ETH and other WETH, use WETH contract's deposit and withdraw\r\n        // wrap ETH into WETH\r\n        if (token0IsETH && inToken1Symbol === \"WETH\") {\r\n            console.log(\"WRAP\");\r\n            // UI should sync value of ETH and WETH\r\n            // if (exactIn) setToken1Amount(token0Amount);\r\n            // else setToken0Amount(token1Amount);\r\n            let result = await wethContract\r\n                .deposit({\r\n                    value: wrappedAmount,\r\n                })\r\n                .catch((e) => {\r\n                    console.log(e);\r\n                    return new ACYSwapErrorStatus(\"WETH Deposit failed\");\r\n                });\r\n\r\n            return result;\r\n        }\r\n        // unwrap WETH into ETH\r\n        else if (inToken0Symbol === \"WETH\" && token1IsETH) {\r\n            console.log(\"UNWRAP\");\r\n\r\n            // UI should sync value of ETH and WETH\r\n            // if (exactIn) setToken1Amount(token0Amount);\r\n            // else setToken0Amount(token1Amount);\r\n\r\n            let result = await wethContract.withdraw(wrappedAmount).catch((e) => {\r\n                console.log(e);\r\n                return new ACYSwapErrorStatus(\"WETH Withdrawal failed\");\r\n            });\r\n            return result;\r\n        }\r\n        // ETH <-> Non-WETH ERC20     OR     Non-WETH ERC20 <-> Non-WETH ERC20\r\n        else {\r\n            console.log(\"SWAP\");\r\n\r\n            console.log(\"------------------ CONSTRUCT TOKEN ------------------\");\r\n            // use WETH for ETHER to work with Uniswap V2 SDK\r\n            const token0 = token0IsETH\r\n                ? WETH[chainId]\r\n                : new Token(chainId, inToken0Address, inToken0Decimal, inToken0Symbol);\r\n            const token1 = token1IsETH\r\n                ? WETH[chainId]\r\n                : new Token(chainId, inToken1Address, inToken1Decimal, inToken1Symbol);\r\n            console.log(token0);\r\n            console.log(token1);\r\n            // quit if the two tokens are equivalent, i.e. have the same chainId and address\r\n            if (token0.equals(token1)) return new ACYSwapErrorStatus(\"Equal tokens!\");\r\n            // helper function from uniswap sdk to get pair address, probably needed if want to replace fetchPairData\r\n            // get pair using our own provider\r\n            console.log(\"------------------ CONSTRUCT PAIR ------------------\");\r\n            console.log(\"FETCH\");\r\n            console.log(pair);\r\n            console.log(\"------------------ CONSTRUCT ROUTE ------------------\");\r\n            // This is where we let Uniswap SDK know we are not using WETH but ETHER\r\n            console.log(route);\r\n            console.log(\"------------------ PARSE AMOUNT ------------------\");\r\n\r\n            console.log(\"------------------ CONSTRUCT TRADE ------------------\");\r\n            console.log(trade);\r\n            console.log(\"------------------ SLIPPAGE CALCULATE ------------------\");\r\n            console.log(slippageAdjustedAmount);\r\n            console.log(minAmountOut);\r\n            console.log(maxAmountIn);\r\n            console.log(\"------------------ ALLOWANCE ------------------\");\r\n            console.log(\"say something about allowance\");\r\n            console.log(\"------------------ PREPARE SWAP ------------------\");\r\n\r\n\r\n            let {methodName, args, value} = Router.swapCallParameters(trade, {\r\n                feeOnTransfer: false,\r\n                allowedSlippage,\r\n                recipient: account,\r\n                ttl: 60,\r\n            });\r\n            const options = !value || isZero(value) ? {} : {value};\r\n\r\n            console.log(\"------------------ ARGUMENTS ------------------\");\r\n            console.log(options);\r\n            console.log(args);\r\n\r\n            let result = await contract.estimateGas[methodName](...args, options)\r\n                .then((gasEstimate) => {\r\n                    return contract[methodName](...args, {\r\n                        gasLimit: calculateGasMargin(gasEstimate),\r\n                        ...options,\r\n                    });\r\n                })\r\n                .catch((e) => {\r\n                    return new ACYSwapErrorStatus(`${methodName} failed with error ${e}`);\r\n                });\r\n            return result;\r\n        }\r\n    })();\r\n    if (status instanceof ACYSwapErrorStatus) {\r\n        setSwapStatus(status.getErrorText());\r\n    } else {\r\n        console.log(status);\r\n        let url = \"https://rinkeby.etherscan.io/tx/\" + status.hash;\r\n        setSwapStatus(<div><a href={url} target={\"_blank\"}>view it on etherscan</a></div>);\r\n    }\r\n}\r\n\r\nconst SwapComponent = () => {\r\n    let [token0, setToken0] = useState(null);\r\n    let [token1, setToken1] = useState(null);\r\n    let [token0Balance, setToken0Balance] = useState(\"not know yet\");\r\n    let [token1Balance, setToken1Balance] = useState(\"not know yet\");\r\n    let [token0BalanceShow, setToken0BalanceShow] = useState(false);\r\n    let [token1BalanceShow, setToken1BalanceShow] = useState(false);\r\n    let [token0Amount, setToken0Amount] = useState();\r\n    let [token1Amount, setToken1Amount] = useState();\r\n    let [slippageTolerance, setSlippageTolerance] = useState(INITIAL_ALLOWED_SLIPPAGE / 100);\r\n    //exactIn = true 在第一行输入\r\n    //exactIn = false 在第二行输入\r\n    let [exactIn, setExactIn] = useState(true);\r\n\r\n    let [needApprove, setNeedApprove] = useState(false);\r\n    let [approveAmount, setApproveAmount] = useState(\"0\");\r\n    let [approveButtonStatus,setApproveButtonStatus]=useState(true);\r\n\r\n    // Breakdown shows the estimated information for swap\r\n\r\n    // let [estimatedStatus,setEstimatedStatus]=useState();\r\n    let [swapBreakdown, setSwapBreakdown] = useState();\r\n    let [swapButtonState, setSwapButtonState] = useState(true);\r\n    let [swapButtonContent, setSwapButtonContent] = useState(\"Connect to Wallet\");\r\n    let [swapStatus, setSwapStatus] = useState();\r\n\r\n\r\n    let[pair,setPair]=useState();\r\n    let[route,setRoute]=useState();\r\n    let[trade,setTrade]=useState();\r\n    let[slippageAdjustedAmount,setSlippageAdjustedAmount]=useState();\r\n    let[minAmountOut,setMinAmountOut]=useState();\r\n    let[maxAmountIn,setMaxAmountIn]=useState();\r\n    let[wethContract,setWethContract]=useState();\r\n    let[wrappedAmount,setWrappedAmount]=useState();\r\n\r\n\r\n    const individualFieldPlaceholder = \"Enter amount\";\r\n    const dependentFieldPlaceholder = \"Estimated value\";\r\n    const slippageTolerancePlaceholder = \"please input a number from 1.00 to 100.00\";\r\n\r\n    const {account, chainId, library, activate} = useWeb3React();\r\n\r\n\r\n    const injected = new InjectedConnector({\r\n        supportedChainIds: [1, 3, 4, 5, 42, 80001],\r\n    });\r\n\r\n    // This is to connect wallet.\r\n    useEffect(() => {\r\n        // activate(injected);\r\n    }, []);\r\n\r\n    // token1Amount is changed according to token0Amount\r\n    let t0Changed = useCallback(async () => {\r\n        if (!token0 || !token1) return;\r\n        if (!exactIn) return;\r\n        await swapGetEstimated(\r\n            {\r\n                ...token0,\r\n                amount: token0Amount,\r\n            },\r\n            {\r\n                ...token1,\r\n                amount: token1Amount,\r\n            },\r\n            slippageTolerance * 100,\r\n            exactIn,\r\n            chainId,\r\n            library,\r\n            account,\r\n            setToken0Amount,\r\n            setToken1Amount,\r\n            setNeedApprove,\r\n            setApproveAmount,\r\n            setApproveButtonStatus,\r\n            setSwapBreakdown,\r\n            setSwapButtonState,\r\n            setSwapButtonContent,\r\n            setSwapStatus,\r\n            setPair,\r\n            setRoute,\r\n            setTrade,\r\n            setSlippageAdjustedAmount,\r\n            setMinAmountOut,\r\n            setMaxAmountIn,\r\n            setWethContract,\r\n            setWrappedAmount\r\n        );\r\n    }, [token0, token1, token0Amount, token1Amount, slippageTolerance, exactIn, chainId, library, account]);\r\n    // token0Amount is changed according to token1Amount\r\n    let t1Changed = useCallback(async () => {\r\n        if (!token0 || !token1) return;\r\n        if (exactIn) return;\r\n        await swapGetEstimated(\r\n            {\r\n                ...token0,\r\n                amount: token0Amount,\r\n            },\r\n            {\r\n                ...token1,\r\n                amount: token1Amount,\r\n            },\r\n            slippageTolerance * 100,\r\n            exactIn,\r\n            chainId,\r\n            library,\r\n            account,\r\n            setToken0Amount,\r\n            setToken1Amount,\r\n            setNeedApprove,\r\n            setApproveAmount,\r\n            setApproveButtonStatus,\r\n            setSwapBreakdown,\r\n            setSwapButtonState,\r\n            setSwapButtonContent,\r\n            setSwapStatus,\r\n            setPair,\r\n            setRoute,\r\n            setTrade,\r\n            setSlippageAdjustedAmount,\r\n            setMinAmountOut,\r\n            setMaxAmountIn,\r\n            setWethContract,\r\n            setWrappedAmount\r\n        );\r\n    }, [token0, token1, token0Amount, token1Amount, slippageTolerance, exactIn, chainId, library, account]);\r\n    useEffect(() => {\r\n        t0Changed();\r\n    }, [token0, token1, token0Amount, token1Amount, slippageTolerance, exactIn, chainId, library, account]);\r\n    useEffect(() => {\r\n        t1Changed();\r\n    }, [token0, token1, token0Amount, token1Amount, slippageTolerance, exactIn, chainId, library, account]);\r\n\r\n    useEffect(() => {\r\n        if (account == undefined) {\r\n            setSwapButtonState(true);\r\n            setSwapButtonContent(\"Connect to Wallet\");\r\n        } else {\r\n            setSwapButtonState(false);\r\n            setSwapButtonContent(\"choose tokens and amount\");\r\n        }\r\n    }, [account]);\r\n    return (\r\n        <div>\r\n            <h1>swap</h1>\r\n            <Alert variant=\"success\">\r\n                <Alert.Heading>Hey, nice to see you</Alert.Heading>\r\n                <p>{account}</p>\r\n            </Alert>\r\n            <Form>\r\n                <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                    <Dropdown>\r\n                        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                            {(token0 && token0.symbol) || \"In token\"}\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu>\r\n                            {supportedTokens.map((token, index) => (\r\n                                <Dropdown.Item\r\n                                    key={index}\r\n                                    onClick={async () => {\r\n                                        if (account == undefined) {\r\n                                            alert(\"please connect to your account\");\r\n                                        } else {\r\n                                            setToken0(token);\r\n                                            setToken0Balance(\r\n                                                await getUserTokenBalance(\r\n                                                    token,\r\n                                                    chainId,\r\n                                                    account,\r\n                                                    library\r\n                                                )\r\n                                            );\r\n                                            setToken0BalanceShow(true);\r\n                                        }\r\n                                    }\r\n                                    }\r\n                                >\r\n                                    {token.symbol}\r\n                                </Dropdown.Item>\r\n                            ))}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                    <Form.Control\r\n                        value={token0Amount}\r\n                        placeholder={\r\n                            exactIn ? individualFieldPlaceholder : dependentFieldPlaceholder\r\n                        }\r\n                        onFocus={(e) => {\r\n                            setExactIn(true);\r\n                        }\r\n                        }\r\n                        onChange={(e) => {\r\n                            setToken0Amount(e.target.value);\r\n                        }}\r\n                    />\r\n                    {token0BalanceShow ? <small>Balance: {token0Balance}</small> : <small>not know yet</small>}\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n                    <Dropdown>\r\n                        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                            {(token1 && token1.symbol) || \"Out token\"}\r\n                        </Dropdown.Toggle>\r\n                        <Dropdown.Menu>\r\n                            {supportedTokens.map((token, index) => (\r\n                                <Dropdown.Item\r\n                                    key={index}\r\n                                    onClick={async () => {\r\n                                        if (account == undefined) {\r\n                                            alert(\"please connect to your account\");\r\n                                        } else {\r\n                                            setToken1(token);\r\n                                            setToken1Balance(\r\n                                                await getUserTokenBalance(\r\n                                                    token,\r\n                                                    chainId,\r\n                                                    account,\r\n                                                    library\r\n                                                )\r\n                                            );\r\n                                            setToken1BalanceShow(true);\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {token.symbol}\r\n                                </Dropdown.Item>\r\n                            ))}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                    <Form.Control\r\n                        value={token1Amount}\r\n                        placeholder={\r\n                            exactIn ? dependentFieldPlaceholder : individualFieldPlaceholder\r\n                        }\r\n                        onFocus={(e) => {\r\n                            setExactIn(false);\r\n                        }}\r\n                        onChange={(e) => {\r\n                            setToken1Amount(e.target.value);\r\n                        }}\r\n                    />\r\n                    {token1BalanceShow ? <small>Balance: {token1Balance}</small> : <small>not know yet</small>}\r\n                </Form.Group>\r\n\r\n\r\n                <InputGroup size=\"sm\" className=\"mb-3\">\r\n                    <InputGroup.Text id=\"inputGroup-sizing-sm\">Slippage tolerance </InputGroup.Text>\r\n                    <FormControl\r\n                        aria-label=\"Small\"\r\n                        aria-describedby=\"inputGroup-sizing-sm\"\r\n                        placeholder={slippageTolerancePlaceholder}\r\n                        onChange={(e => {\r\n                            setSlippageTolerance(e.target.value);\r\n                        })}\r\n\r\n                    />\r\n                    <InputGroup.Text>%</InputGroup.Text>\r\n                </InputGroup>\r\n\r\n                <Alert variant=\"danger\">\r\n                    the Slippage Tolerance you choose is [ {slippageTolerance}% ]\r\n                </Alert>\r\n\r\n                <Alert variant=\"info\">\r\n                    {swapBreakdown && <mark> Swap breakdown:</mark>}\r\n                    {swapBreakdown && swapBreakdown.map((info) => <p>{info}</p>)}\r\n                </Alert>\r\n                {\r\n                    needApprove == true && <mark>\r\n                        <Button\r\n                            variant=\"warning\"\r\n                            onClick={async () => {\r\n                                let state = await approve(token0.address, approveAmount, library, account);\r\n                                if (state == true) {\r\n                                    setSwapButtonState(true);\r\n                                    setSwapButtonContent(\"SWAP\");\r\n                                    setApproveButtonStatus(false);\r\n                                }\r\n                            }}\r\n                            disabled={!approveButtonStatus}\r\n                        >\r\n                            Approve\r\n                        </Button>\r\n                        {' '}\r\n\r\n                    </mark>\r\n                }\r\n\r\n\r\n                <Button\r\n                    variant=\"success\"\r\n                    disabled={!swapButtonState}\r\n\r\n                    onClick={() => {\r\n                        if (account == undefined) {\r\n                            activate(injected);\r\n                        } else {\r\n\r\n\r\n                            swap(\r\n                                {\r\n                                    ...token0,\r\n                                    amount: token0Amount,\r\n                                },\r\n                                {\r\n                                    ...token1,\r\n                                    amount: token1Amount,\r\n                                },\r\n                                slippageTolerance * 100,\r\n                                exactIn,\r\n                                chainId,\r\n                                library,\r\n                                account,\r\n                                pair,\r\n                                route,\r\n                                trade,\r\n                                slippageAdjustedAmount,\r\n                                minAmountOut,\r\n                                maxAmountIn,\r\n                                wethContract,\r\n                                wrappedAmount,\r\n                                setSwapStatus\r\n                            );\r\n                        }\r\n                    }\r\n                    }\r\n                >\r\n                    {swapButtonContent}\r\n                </Button>\r\n                <Alert variant=\"primary\">\r\n                    { swapStatus && <mark> swapStatus:</mark>}\r\n                    { swapStatus && <p> {swapStatus}</p>}\r\n                </Alert>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SwapComponent;\r\n"]},"metadata":{},"sourceType":"module"}