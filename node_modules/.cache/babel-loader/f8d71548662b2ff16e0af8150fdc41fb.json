{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\acy-dex-swap\\\\src\\\\components\\\\LiquidityComponent.js\",\n    _s = $RefreshSig$();\n\nimport { useWeb3React } from \"@web3-react/core\";\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { ACYSwapErrorStatus, approve, calculateGasMargin, calculateSlippageAmount, checkTokenIsApproved, getRouterContract, getTokenTotalSupply, getUserTokenBalance, getUserTokenBalanceRaw, INITIAL_ALLOWED_SLIPPAGE, supportedTokens } from \"../utils\";\nimport { Alert, Button, Dropdown, Form, FormControl, InputGroup } from \"react-bootstrap\";\nimport { CurrencyAmount, ETHER, FACTORY_ADDRESS, Fetcher, InsufficientReservesError, Percent, Token, TokenAmount, WETH } from \"@uniswap/sdk\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { parseUnits } from \"@ethersproject/units\"; // get the estimated amount of the other token required when adding liquidity, in readable string.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport async function getEstimated(inputToken0, inputToken1, allowedSlippage = INITIAL_ALLOWED_SLIPPAGE, exactIn = true, chainId, library, account, setToken0Amount, setToken1Amount, setNeedApproveToken0, setNeedApproveToken1, setApproveAmountToken0, setApproveAmountToken1, setApproveToken0ButtonShow, setApproveToken1ButtonShow, setLiquidityBreakdown, setButtonContent, setButtonStatus, setLiquidityStatus, setPair, setNoLiquidity, setParsedToken0Amount, setParsedToken1Amount, setArgs, setValue) {\n  let status = await (async () => {\n    setNeedApproveToken0(false);\n    setNeedApproveToken1(false);\n    setApproveAmountToken0(\"0\");\n    setApproveAmountToken1(\"0\");\n    setApproveToken0ButtonShow(false);\n    setApproveToken1ButtonShow(false);\n    setLiquidityBreakdown(\"\");\n    setButtonContent(\"loading...\");\n    setButtonStatus(false);\n    setLiquidityStatus(\"\");\n    console.log(FACTORY_ADDRESS);\n    let router = getRouterContract(library, account);\n    let slippage = allowedSlippage * 0.01;\n    let {\n      address: inToken0Address,\n      symbol: inToken0Symbol,\n      decimal: inToken0Decimal,\n      amount: inToken0Amount\n    } = inputToken0;\n    let {\n      address: inToken1Address,\n      symbol: inToken1Symbol,\n      decimal: inToken1Decimal,\n      amount: inToken1Amount\n    } = inputToken1;\n    if (!inputToken0.symbol || !inputToken1.symbol) return new ACYSwapErrorStatus(\"please choose tokens\");\n    if (exactIn && inToken0Amount == \"0\") return new ACYSwapErrorStatus(\"token0Amount is 0\");\n    if (!exactIn && inToken1Amount == \"0\") return new ACYSwapErrorStatus(\"token1Amount is 0\");\n    if (exactIn && inToken0Amount == \"\") return new ACYSwapErrorStatus(\"token0Amount is \\\"\\\"\");\n    if (!exactIn && inToken1Amount == \"\") return new ACYSwapErrorStatus(\"token1Amount is \\\"\\\"\");\n    if (exactIn && isNaN(parseFloat(inToken0Amount))) return new ACYSwapErrorStatus(\"token0Amount is NaN\");\n    if (!exactIn && isNaN(parseFloat(inToken1Amount))) return new ACYSwapErrorStatus(\"token1Amount is NaN\");\n    let token0IsETH = inToken0Symbol === \"ETH\";\n    let token1IsETH = inToken1Symbol === \"ETH\";\n    console.log(inputToken0);\n    console.log(inputToken1);\n\n    if (token0IsETH && token1IsETH) {\n      setButtonContent(\"Doesn't support ETH to ETH\");\n      setButtonStatus(false);\n      return new ACYSwapErrorStatus(\"Doesn't support ETH to ETH\");\n    } else if (token0IsETH && inToken1Symbol === \"WETH\" || inToken0Symbol === \"WETH\" && token1IsETH) {\n      setButtonContent(\"Invalid pair WETH/ETH\");\n      setButtonStatus(false);\n      return new ACYSwapErrorStatus(\"Invalid pair WETH/ETH\");\n    } // ETH <-> Non-WETH ERC20     OR     Non-WETH ERC20 <-> Non-WETH ERC20\n    else {\n        console.log(\"ADD LIQUIDITY\");\n        console.log(\"------------------ CONSTRUCT TOKEN ------------------\"); // use WETH for ETHER to work with Uniswap V2 SDK\n\n        const token0 = token0IsETH ? WETH[chainId] : new Token(chainId, inToken0Address, inToken0Decimal, inToken0Symbol);\n        const token1 = token1IsETH ? WETH[chainId] : new Token(chainId, inToken1Address, inToken1Decimal, inToken1Symbol);\n\n        if (token0.equals(token1)) {\n          setButtonContent(\"Equal tokens\");\n          setButtonStatus(false);\n          return new ACYSwapErrorStatus(\"Equal tokens!\");\n        } // get pair using our own provider\n\n\n        const pair = await Fetcher.fetchPairData(token0, token1, library).then(pair => {\n          console.log(pair.reserve0.raw.toString());\n          console.log(pair.reserve1.raw.toString());\n          return pair;\n        }).catch(e => {\n          return new ACYSwapErrorStatus(`${token0.symbol} - ${token1.symbol} pool does not exist. Create one?`);\n        });\n        console.log(\"pair\");\n        console.log(pair);\n        setPair(pair);\n        let noLiquidity = false;\n\n        if (pair instanceof ACYSwapErrorStatus) {\n          noLiquidity = true;\n        }\n\n        setNoLiquidity(noLiquidity);\n        console.log(\"------------------ PARSE AMOUNT ------------------\"); // convert typed in amount to BigNumber using ethers.js's parseUnits,\n\n        let parsedAmount;\n\n        try {\n          parsedAmount = exactIn ? new TokenAmount(token0, parseUnits(inToken0Amount, inToken0Decimal)) : new TokenAmount(token1, parseUnits(inToken1Amount, inToken1Decimal));\n        } catch (e) {\n          console.log(\"parsedAmount\");\n          console.log(e);\n          setButtonStatus(false);\n\n          if (e.fault === \"underflow\") {\n            setButtonContent(e.fault);\n            return new ACYSwapErrorStatus(e.fault);\n          } else {\n            setButtonContent(\"unknow error\");\n            return new ACYSwapErrorStatus(\"unknow error\");\n          }\n        }\n\n        let parsedToken0Amount;\n        let parsedToken1Amount; // this is have pool\n\n        if (!noLiquidity) {\n          console.log(\"estimated dependent amount\");\n          let dependentTokenAmount;\n\n          if (exactIn) {\n            dependentTokenAmount = pair.priceOf(token0).quote(parsedAmount);\n            let token0TokenAmount;\n\n            try {\n              token0TokenAmount = new TokenAmount(token0, parseUnits(inToken0Amount, inToken0Decimal));\n            } catch (e) {\n              console.log(\"token0TokenAmount\");\n              console.log(e);\n              setButtonStatus(false);\n\n              if (e.fault === \"underflow\") {\n                setButtonContent(e.fault);\n                return new ACYSwapErrorStatus(e.fault);\n              } else {\n                setButtonContent(\"unknow error\");\n                return new ACYSwapErrorStatus(\"unknow error\");\n              }\n            }\n\n            parsedToken0Amount = token0 === ETHER ? CurrencyAmount.ether(token0TokenAmount.raw) : token0TokenAmount;\n            parsedToken1Amount = token1 === ETHER ? CurrencyAmount.ether(dependentTokenAmount.raw) : dependentTokenAmount;\n            setToken1Amount(dependentTokenAmount.toExact());\n            inToken1Amount = dependentTokenAmount.toExact();\n          } else {\n            dependentTokenAmount = pair.priceOf(token1).quote(parsedAmount);\n            let token1TokenAmount;\n\n            try {\n              token1TokenAmount = new TokenAmount(token1, parseUnits(inToken1Amount, inToken1Decimal));\n            } catch (e) {\n              console.log(\"token0TokenAmount\");\n              console.log(e);\n              setButtonStatus(false);\n\n              if (e.fault === \"underflow\") {\n                setButtonContent(e.fault);\n                return new ACYSwapErrorStatus(e.fault);\n              } else {\n                setButtonContent(\"unknow error\");\n                return new ACYSwapErrorStatus(\"unknow error\");\n              }\n            }\n\n            parsedToken0Amount = token0 === ETHER ? CurrencyAmount.ether(dependentTokenAmount.raw) : dependentTokenAmount;\n            parsedToken1Amount = token1 === ETHER ? CurrencyAmount.ether(token1TokenAmount.raw) : token1TokenAmount;\n            setToken0Amount(dependentTokenAmount.toExact());\n            inToken0Amount = dependentTokenAmount.toExact();\n          }\n        } else {\n          // this is to create new pools\n          if (inToken0Amount === \"0\" || inToken1Amount === \"0\") {\n            if (noLiquidity) {\n              setButtonStatus(false);\n              setButtonContent(\"create new pool\");\n              return new ACYSwapErrorStatus(\"Creating a new pool, please enter both amounts\");\n            } else {\n              setButtonStatus(false);\n              setButtonContent(\"add liquidity\");\n              return new ACYSwapErrorStatus(\"One field is empty, it's probably a new pool\");\n            }\n          }\n\n          try {\n            parsedToken0Amount = new TokenAmount(token0, parseUnits(inToken0Amount, inToken0Decimal));\n            parsedToken1Amount = new TokenAmount(token1, parseUnits(inToken1Amount, inToken1Decimal));\n          } catch (e) {\n            console.log(\"parsedToken0Amount and parsedToken1Amount\");\n            console.log(e);\n            setButtonStatus(false);\n\n            if (e.fault === \"underflow\") {\n              setButtonContent(e.fault);\n              return new ACYSwapErrorStatus(e.fault);\n            } else {\n              setButtonContent(\"unknow error\");\n              return new ACYSwapErrorStatus(\"unknow error\");\n            }\n          }\n        }\n\n        setParsedToken0Amount(parsedToken0Amount);\n        setParsedToken1Amount(parsedToken1Amount); // check user account balance\n\n        console.log(\"------------------ CHECK BALANCE ------------------\");\n        let userToken0Balance = await getUserTokenBalanceRaw(token0IsETH ? ETHER : new Token(chainId, inToken0Address, inToken0Decimal, inToken0Symbol), account, library);\n        let userToken1Balance = await getUserTokenBalanceRaw(token1IsETH ? ETHER : new Token(chainId, inToken1Address, inToken1Decimal, inToken1Symbol), account, library);\n        console.log(\"token0 balance\");\n        console.log(userToken0Balance);\n        console.log(\"token1 balance\");\n        console.log(userToken1Balance);\n        let userHasSufficientBalance;\n\n        try {\n          userHasSufficientBalance = userToken0Balance.gte(parseUnits(inToken0Amount, inToken0Decimal)) && userToken1Balance.gte(parseUnits(inToken1Amount, inToken1Decimal));\n        } catch (e) {\n          console.log(userHasSufficientBalance);\n          console.log(e);\n          setButtonStatus(false);\n\n          if (e.fault === \"underflow\") {\n            setButtonContent(e.fault);\n            return new ACYSwapErrorStatus(e.fault);\n          } else {\n            setButtonContent(\"unknow error\");\n            return new ACYSwapErrorStatus(\"unknow error\");\n          }\n        } // quit if user doesn't have enough balance, otherwise this will cause error\n\n\n        if (!userHasSufficientBalance) {\n          setButtonContent(\"Not enough balance\");\n          setButtonStatus(false);\n          return new ACYSwapErrorStatus(\"Not enough balance\");\n        }\n\n        console.log(\"------------------ BREAKDOWN ------------------\");\n\n        if (!noLiquidity) {\n          let totalSupply = await getTokenTotalSupply(pair.liquidityToken, library, account);\n          console.log(\"Liquidity Minted\");\n          console.log(pair.liquidityToken);\n\n          try {\n            let liquidityMinted = pair.getLiquidityMinted(totalSupply, parsedToken0Amount, parsedToken1Amount);\n            let poolTokenPercentage = new Percent(liquidityMinted.raw, totalSupply.add(liquidityMinted).raw).toFixed(4);\n            setLiquidityBreakdown([`Slippage tolerance : ${slippage}%`, `Pool reserve: ${pair.reserve0.toExact()} ${pair.token0.symbol} + ${pair.reserve1.toExact()} ${pair.token1.symbol}`, `Pool share: ${poolTokenPercentage}%`, `${token0.symbol}: ${parsedToken0Amount.toExact()}`, `${token1.symbol}: ${parsedToken1Amount.toExact()}` // noLiquidity ? \"100\" : `${poolTokenPercentage?.toSignificant(4)}} %`,\n            ]);\n          } catch (e) {\n            if (e instanceof InsufficientReservesError) {\n              setButtonContent(\"Insufficient reserve!\");\n              setButtonStatus(false); // alert(\"something wrong !!!!\");\n\n              return new ACYSwapErrorStatus(\"Insufficient reserve!\");\n              console.log(\"Insufficient reserve!\");\n            } else {\n              setButtonContent(\"Unhandled exception!\");\n              setButtonStatus(false);\n              return new ACYSwapErrorStatus(\"Unhandled exception!\");\n              console.log(\"Unhandled exception!\");\n              console.log(e);\n            }\n          }\n        } else {\n          setLiquidityBreakdown([\"new pool\"]);\n        }\n\n        console.log(\"------------------ ALLOWANCE ------------------\");\n        let approveStatus = 0;\n\n        if (!token0IsETH) {\n          let token0approval = await checkTokenIsApproved(inToken0Address, parsedToken0Amount.raw.toString(), library, account);\n          console.log(\"token 0 approved?\");\n          console.log(token0approval);\n\n          if (!token0approval) {\n            console.log(\"Not enough allowance\");\n            setApproveAmountToken0(parsedToken0Amount.raw.toString());\n            setNeedApproveToken0(true);\n            setApproveToken0ButtonShow(true);\n            approveStatus += 1;\n          }\n        }\n\n        if (!token1IsETH) {\n          console.log(`Inside addLiquidity, amount needed: ${parsedToken1Amount.raw.toString()}`);\n          let token1approval = await checkTokenIsApproved(inToken1Address, parsedToken1Amount.raw.toString(), library, account);\n          console.log(\"token 1 approved?\");\n          console.log(token1approval);\n\n          if (!token1approval) {\n            console.log(\"Not enough allowance for token1\");\n            setApproveAmountToken1(parsedToken1Amount.raw.toString());\n            setNeedApproveToken1(true);\n            setApproveToken1ButtonShow(true);\n            approveStatus += 2;\n          }\n        }\n\n        if (approveStatus > 0) {\n          setButtonStatus(false);\n          setButtonContent(\"need approve\");\n          return new ACYSwapErrorStatus(`Need approve ${approveStatus === 1 ? inToken0Symbol : approveStatus === 2 ? inToken1Symbol : `${inToken0Symbol} and ${inToken1Symbol}`}`);\n        }\n\n        setButtonStatus(true);\n\n        if (noLiquidity) {\n          setButtonContent(\"create a new pool\");\n        } else {\n          setButtonContent(\"add liquidity\");\n        }\n\n        console.log(\"------------------ PREPARE ADD LIQUIDITY ------------------\");\n        console.log(\"parsed token 0 amount\");\n        console.log(parsedToken0Amount.raw);\n        console.log(\"parsed token 1 amount\");\n        console.log(parsedToken1Amount.raw);\n        console.log(\"slippage\");\n        console.log(allowedSlippage);\n        let estimate;\n        let method;\n        let args;\n        let value;\n\n        if (token0IsETH || token1IsETH) {\n          estimate = router.estimateGas.addLiquidityETH;\n          method = router.addLiquidityETH;\n          let nonETHToken = token0IsETH ? token1 : token0;\n          let parsedNonETHTokenAmount = token0IsETH ? parsedToken1Amount : parsedToken0Amount;\n          let minETH = token0IsETH ? calculateSlippageAmount(parsedToken0Amount, noLiquidity ? 0 : allowedSlippage)[0].toString() : calculateSlippageAmount(parsedToken1Amount, noLiquidity ? 0 : allowedSlippage)[0].toString();\n          args = [nonETHToken.address, parsedNonETHTokenAmount.raw.toString(), calculateSlippageAmount(parsedNonETHTokenAmount, noLiquidity ? 0 : allowedSlippage)[0].toString(), minETH, account, `0x${(Math.floor(new Date().getTime() / 1000) + 60).toString(16)}`];\n          value = BigNumber.from((token1IsETH ? parsedToken1Amount : parsedToken0Amount).raw.toString());\n          console.log(value);\n        } else {\n          estimate = router.estimateGas.addLiquidity;\n          method = router.addLiquidity;\n          args = [inToken0Address, inToken1Address, parsedToken0Amount.raw.toString(), parsedToken1Amount.raw.toString(), calculateSlippageAmount(parsedToken0Amount, noLiquidity ? 0 : allowedSlippage)[0].toString(), calculateSlippageAmount(parsedToken1Amount, noLiquidity ? 0 : allowedSlippage)[0].toString(), account, `0x${(Math.floor(new Date().getTime() / 1000) + 60).toString(16)}`];\n          value = null;\n        }\n\n        console.log(\"args\");\n        console.log(args);\n        console.log(\"estimate\");\n        console.log(estimate);\n        console.log(\"method\");\n        console.log(method);\n        console.log(\"value\");\n        console.log(value);\n        setArgs(args);\n        setValue(value);\n      } //  end of\n    // ETH <-> Non-WETH ERC20     OR     Non-WETH ERC20 <-> Non-WETH ERC20\n\n  })();\n\n  if (status instanceof ACYSwapErrorStatus) {\n    console.log(status.getErrorText());\n  } else {\n    console.log(status);\n  }\n}\nexport async function addLiquidity(inputToken0, inputToken1, allowedSlippage = INITIAL_ALLOWED_SLIPPAGE, exactIn = true, chainId, library, account, pair, noLiquidity, parsedToken0Amount, parsedToken1Amount, args, value, setLiquidityStatus) {\n  let status = await (async () => {\n    // check uniswap\n    console.log(FACTORY_ADDRESS);\n    let router = getRouterContract(library, account);\n    const {\n      address: inToken0Address,\n      symbol: inToken0Symbol,\n      decimal: inToken0Decimal,\n      amount: inToken0Amount\n    } = inputToken0;\n    const {\n      address: inToken1Address,\n      symbol: inToken1Symbol,\n      decimal: inToken1Decimal,\n      amount: inToken1Amount\n    } = inputToken1;\n    let token0IsETH = inToken0Symbol === \"ETH\";\n    let token1IsETH = inToken1Symbol === \"ETH\";\n    console.log(\"------------------ RECEIVED TOKEN ------------------\");\n    console.log(\"token0\");\n    console.log(inputToken0);\n    console.log(\"token1\");\n    console.log(inputToken1);\n    if (token0IsETH && token1IsETH) return new ACYSwapErrorStatus(\"Doesn't support ETH to ETH\");\n\n    if (token0IsETH && inToken1Symbol === \"WETH\" || inToken0Symbol === \"WETH\" && token1IsETH) {\n      // UI should sync value of ETH and WETH\n      return new ACYSwapErrorStatus(\"Invalid pair WETH/ETH\");\n    } // ETH <-> Non-WETH ERC20     OR     Non-WETH ERC20 <-> Non-WETH ERC20\n    else {\n        console.log(\"ADD LIQUIDITY\");\n        console.log(\"------------------ CONSTRUCT TOKEN ------------------\"); // use WETH for ETHER to work with Uniswap V2 SDK\n\n        const token0 = token0IsETH ? WETH[chainId] : new Token(chainId, inToken0Address, inToken0Decimal, inToken0Symbol);\n        const token1 = token1IsETH ? WETH[chainId] : new Token(chainId, inToken1Address, inToken1Decimal, inToken1Symbol); // quit if the two tokens are equivalent, i.e. have the same chainId and address\n\n        if (token0.equals(token1)) return new ACYSwapErrorStatus(\"Equal tokens!\"); // get pair using our own provider\n\n        console.log(\"------------------ CONSTRUCT PAIR ------------------\");\n        console.log(\"FETCH pair\"); // if an error occurs, because pair doesn't exists\n\n        console.log(pair);\n        console.log(noLiquidity);\n        console.log(\"------------------ PARSE AMOUNT ------------------\");\n        console.log(parsedToken0Amount);\n        console.log(parsedToken1Amount);\n        console.log(\"------------------ CHECK BALANCE ------------------\");\n        console.log(\"------------------ BREAKDOWN ------------------\");\n        console.log(\"------------------ ALLOWANCE ------------------\");\n        console.log(\"------------------ PREPARE ADD LIQUIDITY ------------------\");\n        let estimate;\n        let method;\n\n        if (token0IsETH || token1IsETH) {\n          estimate = router.estimateGas.addLiquidityETH;\n          method = router.addLiquidityETH;\n          console.log(args);\n          console.log(value);\n        } else {\n          estimate = router.estimateGas.addLiquidity;\n          method = router.addLiquidity;\n          console.log(args);\n          console.log(value);\n        }\n\n        setLiquidityStatus(\"Processing add liquidity request\");\n        console.log(\"parsed token 0 amount\");\n        console.log(parsedToken0Amount.raw);\n        console.log(\"parsed token 1 amount\");\n        console.log(parsedToken1Amount.raw);\n        console.log(\"slippage\");\n        console.log(allowedSlippage);\n        console.log(estimate);\n        console.log(method);\n        console.log(args);\n        console.log(value);\n        let result = await estimate(...args, value ? {\n          value\n        } : {}).then(estimatedGasLimit => method(...args, { ...(value ? {\n            value\n          } : {}),\n          gasLimit: calculateGasMargin(estimatedGasLimit)\n        }).catch(e => {\n          return new ACYSwapErrorStatus(\"Error in transaction\");\n        }));\n        return result;\n      }\n  })();\n\n  if (status instanceof ACYSwapErrorStatus) {\n    setLiquidityStatus(status.getErrorText());\n  } else {\n    console.log(\"status\");\n    console.log(status);\n    let url = \"https://rinkeby.etherscan.io/tx/\" + status.hash;\n    setLiquidityStatus( /*#__PURE__*/_jsxDEV(\"a\", {\n      href: url,\n      target: \"_blank\",\n      children: \"view it on etherscan\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 694,\n      columnNumber: 28\n    }, this));\n  }\n\n  return;\n} // expects at least has WETH as one of the tokens\n\nexport async function getAllLiquidityPositions(tokens, chainId, library, account) {\n  // we only want WETH\n  tokens = tokens.filter(token => token.symbol !== \"ETH\");\n  let totalTokenCount = tokens.length;\n  let userNonZeroLiquidityPositions = [];\n  if (totalTokenCount === 1) return;\n  let checkLiquidityPositionTasks = [];\n\n  for (let i = 0; i < totalTokenCount; i++) {\n    for (let j = i + 1; j < totalTokenCount; j++) {\n      const {\n        address: token0Address,\n        symbol: token0Symbol,\n        decimal: token0Decimal\n      } = tokens[i];\n      const {\n        address: token1Address,\n        symbol: token1Symbol,\n        decimal: token1Decimal\n      } = tokens[j];\n      const token0 = new Token(chainId, token0Address, token0Decimal, token0Symbol);\n      const token1 = new Token(chainId, token1Address, token1Decimal, token1Symbol); // quit if the two tokens are equivalent, i.e. have the same chainId and address\n\n      if (token0.equals(token1)) continue; // queue get pair task\n\n      const pairTask = Fetcher.fetchPairData(token0, token1, library);\n      checkLiquidityPositionTasks.push(pairTask);\n    }\n  }\n\n  let pairs = await Promise.allSettled(checkLiquidityPositionTasks); // now we process the pairs\n\n  for (let pair of pairs) {\n    if (pair.status === \"rejected\") continue;\n    pair = pair.value;\n    let userPoolBalance = await getUserTokenBalanceRaw(pair.liquidityToken, account, library);\n    if (userPoolBalance.isZero()) continue;\n    userPoolBalance = new TokenAmount(pair.liquidityToken, userPoolBalance);\n    let totalPoolTokens = await getTokenTotalSupply(pair.liquidityToken, library, account);\n    let token0Deposited = pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false);\n    let token1Deposited = pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false);\n    let totalSupply = await getTokenTotalSupply(pair.liquidityToken, library, account); // let liquidityMinted = pair.getLiquidityMinted(\n    //     totalSupply,\n    //     token0Deposited,\n    //     token1Deposited\n    // );\n\n    let poolTokenPercentage = new Percent(userPoolBalance.raw, totalSupply.raw).toFixed(4);\n    userNonZeroLiquidityPositions.push({\n      pool: `${pair.token0.symbol}/${pair.token1.symbol}`,\n      token0Amount: `${token0Deposited.toSignificant(6)} ${pair.token0.symbol}`,\n      token1Amount: `${token1Deposited.toSignificant(6)} ${pair.token1.symbol}`,\n      token0Reserve: `${pair.reserve0.toExact()} ${pair.token0.symbol}`,\n      token1Reserve: `${pair.reserve1.toExact()} ${pair.token1.symbol}`,\n      share: `${poolTokenPercentage}%`\n    });\n  }\n\n  console.log(\"token pairs that user has positions:\");\n  console.log(userNonZeroLiquidityPositions);\n  return userNonZeroLiquidityPositions;\n}\n\nconst LiquidityComponent = () => {\n  _s();\n\n  let [token0, setToken0] = useState(null);\n  let [token1, setToken1] = useState(null);\n  let [token0Balance, setToken0Balance] = useState(\"not know yet\");\n  let [token1Balance, setToken1Balance] = useState(\"not know yet\");\n  let [token0Amount, setToken0Amount] = useState(\"0\");\n  let [token1Amount, setToken1Amount] = useState(\"0\");\n  let [token0BalanceShow, setToken0BalanceShow] = useState(false);\n  let [token1BalanceShow, setToken1BalanceShow] = useState(false); // true 指前面的，false指后面的\n\n  let [exactIn, setExactIn] = useState(true);\n  let [slippageTolerance, setSlippageTolerance] = useState(INITIAL_ALLOWED_SLIPPAGE / 100);\n  let [needApproveToken0, setNeedApproveToken0] = useState(false);\n  let [needApproveToken1, setNeedApproveToken1] = useState(false);\n  let [approveAmountToken0, setApproveAmountToken0] = useState(\"0\");\n  let [approveAmountToken1, setApproveAmountToken1] = useState(\"0\");\n  let [approveToken0ButtonShow, setApproveToken0ButtonShow] = useState(false);\n  let [approveToken1ButtonShow, setApproveToken1ButtonShow] = useState(false);\n  let [liquidityBreakdown, setLiquidityBreakdown] = useState();\n  let [buttonContent, setButtonContent] = useState(\"connect to wallet\");\n  let [buttonStatus, setButtonStatus] = useState(true);\n  let [liquidityStatus, setLiquidityStatus] = useState();\n  let [pair, setPair] = useState();\n  let [noLiquidity, setNoLiquidity] = useState();\n  let [parsedToken0Amount, setParsedToken0Amount] = useState();\n  let [parsedToken1Amount, setParsedToken1Amount] = useState();\n  let [args, setArgs] = useState();\n  let [value, setValue] = useState();\n  let [userLiquidityPositions, setUserLiquidityPositions] = useState([]);\n  const individualFieldPlaceholder = \"Enter amount\";\n  const dependentFieldPlaceholder = \"Estimated value\";\n  const slippageTolerancePlaceholder = \"please input a number from 1.00 to 100.00\";\n  const {\n    account,\n    chainId,\n    library,\n    activate\n  } = useWeb3React();\n  const injected = new InjectedConnector({\n    supportedChainIds: [1, 3, 4, 5, 42, 80001]\n  });\n  useEffect(() => {// activate(injected);\n  }, []);\n  let t0Changed = useCallback(async () => {\n    if (!token0 || !token1) return;\n    if (!exactIn) return;\n    await getEstimated({ ...token0,\n      amount: token0Amount\n    }, { ...token1,\n      amount: token1Amount\n    }, slippageTolerance * 100, exactIn, chainId, library, account, setToken0Amount, setToken1Amount, setNeedApproveToken0, setNeedApproveToken1, setApproveAmountToken0, setApproveAmountToken1, setApproveToken0ButtonShow, setApproveToken1ButtonShow, setLiquidityBreakdown, setButtonContent, setButtonStatus, setLiquidityStatus, setPair, setNoLiquidity, setParsedToken0Amount, setParsedToken1Amount, setArgs, setValue);\n  }, [token0, token1, token0Amount, token1Amount, slippageTolerance, exactIn, chainId, library, account]);\n  let t1Changed = useCallback(async () => {\n    if (!token0 || !token1) return;\n    if (exactIn) return;\n    await getEstimated({ ...token0,\n      amount: token0Amount\n    }, { ...token1,\n      amount: token1Amount\n    }, slippageTolerance * 100, exactIn, chainId, library, account, setToken0Amount, setToken1Amount, setNeedApproveToken0, setNeedApproveToken1, setApproveAmountToken0, setApproveAmountToken1, setApproveToken0ButtonShow, setApproveToken1ButtonShow, setLiquidityBreakdown, setButtonContent, setButtonStatus, setLiquidityStatus, setPair, setNoLiquidity, setParsedToken0Amount, setParsedToken1Amount, setArgs, setValue);\n  }, [token0, token1, token0Amount, token1Amount, slippageTolerance, exactIn, chainId, library, account]);\n  useEffect(() => {\n    t0Changed();\n  }, [token0, token1, token0Amount, token1Amount, slippageTolerance, exactIn, chainId, library, account]);\n  useEffect(() => {\n    t1Changed();\n  }, [token0, token1, token0Amount, token1Amount, slippageTolerance, exactIn, chainId, library, account]);\n  useEffect(() => {\n    if (account == undefined) {\n      setButtonStatus(true);\n      setButtonContent(\"Connect to Wallet\");\n    } else {\n      setButtonContent(\"choose tokens and amount\");\n      setButtonStatus(false);\n    }\n  }, [chainId, library, account]);\n  useEffect(() => {\n    async function getAllUserLiquidityPositions() {\n      if (account != undefined) {\n        setUserLiquidityPositions(await getAllLiquidityPositions(supportedTokens, chainId, library, account));\n      }\n    }\n\n    getAllUserLiquidityPositions();\n  }, [chainId, library, account]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add liquidity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 979,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formBasicEmail\",\n        children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n          children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n            variant: \"success\",\n            id: \"dropdown-basic\",\n            children: token0 && token0.symbol || \"In token\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 983,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n            children: supportedTokens.map((token, index) => /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              onClick: async () => {\n                if (account == undefined) {\n                  alert(\"please connect to your account\");\n                } else {\n                  setToken0(token);\n                  setToken0Balance(await getUserTokenBalance(token, chainId, account, library));\n                  setToken0BalanceShow(true);\n                }\n              },\n              children: token.symbol\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 989,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 987,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 982,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          value: token0Amount,\n          placeholder: exactIn ? individualFieldPlaceholder : dependentFieldPlaceholder,\n          onChange: e => {\n            setExactIn(true);\n            setToken0Amount(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1013,\n          columnNumber: 21\n        }, this), token0BalanceShow ? /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [\"Balance: \", token0Balance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1024,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"not know yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1025,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 981,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formBasicPassword\",\n        children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n          children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n            variant: \"success\",\n            id: \"dropdown-basic\",\n            children: token1 && token1.symbol || \"Out token\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1030,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n            children: supportedTokens.map((token, index) => /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              onClick: async () => {\n                if (account == undefined) {\n                  alert(\"please connect to your account\");\n                } else {\n                  setToken1(token);\n                  setToken1Balance(await getUserTokenBalance(token, chainId, account, library));\n                  setToken1BalanceShow(true);\n                }\n              },\n              children: token.symbol\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1036,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1034,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1029,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          value: token1Amount,\n          placeholder: exactIn ? dependentFieldPlaceholder : individualFieldPlaceholder,\n          onChange: e => {\n            setExactIn(false);\n            setToken1Amount(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1060,\n          columnNumber: 21\n        }, this), token1BalanceShow ? /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [\"Balance: \", token1Balance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1071,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"not know yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1072,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1028,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n        size: \"sm\",\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(InputGroup.Text, {\n          id: \"inputGroup-sizing-sm\",\n          children: \"Slippage tolerance \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1076,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          \"aria-label\": \"Small\",\n          \"aria-describedby\": \"inputGroup-sizing-sm\",\n          placeholder: slippageTolerancePlaceholder,\n          onChange: e => {\n            setSlippageTolerance(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1077,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(InputGroup.Text, {\n          children: \"%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1086,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1075,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"danger\",\n        children: [\"the Slippage Tolerance you choose is [ \", slippageTolerance, \"% ]\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1088,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"primary\",\n        children: [liquidityBreakdown && /*#__PURE__*/_jsxDEV(\"mark\", {\n          children: \"liquidity breakdown\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1094,\n          columnNumber: 44\n        }, this), liquidityBreakdown && liquidityBreakdown.map(info => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: info\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1095,\n          columnNumber: 77\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1093,\n        columnNumber: 17\n      }, this), approveToken0ButtonShow == true && /*#__PURE__*/_jsxDEV(\"mark\", {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"warning\",\n          onClick: async () => {\n            let state = await approve(token0.address, approveAmountToken0, library, account);\n\n            if (state == true) {\n              setNeedApproveToken0(false);\n              await getEstimated({ ...token0,\n                amount: token0Amount\n              }, { ...token1,\n                amount: token1Amount\n              }, slippageTolerance * 100, exactIn, chainId, library, account, setToken0Amount, setToken1Amount, setNeedApproveToken0, setNeedApproveToken1, setApproveAmountToken0, setApproveAmountToken1, setApproveToken0ButtonShow, setApproveToken1ButtonShow, setLiquidityBreakdown, setButtonContent, setButtonStatus, setLiquidityStatus, setPair, setNoLiquidity, setParsedToken0Amount, setParsedToken1Amount, setArgs, setValue);\n\n              if (needApproveToken1 == false) {\n                if (!noLiquidity) setButtonContent(\"add liquidity\");else setButtonStatus(\"create new pool\");\n                setButtonStatus(true);\n              }\n            }\n          },\n          disabled: !needApproveToken0,\n          children: [\"Approve \", token0 && token0.symbol]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1102,\n          columnNumber: 25\n        }, this), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1101,\n        columnNumber: 56\n      }, this), approveToken1ButtonShow == true && /*#__PURE__*/_jsxDEV(\"mark\", {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"warning\",\n          onClick: async () => {\n            let state = await approve(token1.address, approveAmountToken1, library, account);\n\n            if (state == true) {\n              // console.log(\"TTTTTTTTTTTTTTTTTTTTTTT\");\n              // alert(\"TTTTTTTTTTTTTT\");\n              setNeedApproveToken1(false);\n              await getEstimated({ ...token0,\n                amount: token0Amount\n              }, { ...token1,\n                amount: token1Amount\n              }, slippageTolerance * 100, exactIn, chainId, library, account, setToken0Amount, setToken1Amount, setNeedApproveToken0, setNeedApproveToken1, setApproveAmountToken0, setApproveAmountToken1, setApproveToken0ButtonShow, setApproveToken1ButtonShow, setLiquidityBreakdown, setButtonContent, setButtonStatus, setLiquidityStatus, setPair, setNoLiquidity, setParsedToken0Amount, setParsedToken1Amount, setArgs, setValue);\n\n              if (needApproveToken0 == false) {\n                if (!noLiquidity) setButtonContent(\"add liquidity\");else setButtonStatus(\"create new pool\");\n                setButtonStatus(true);\n              }\n            }\n          },\n          disabled: !needApproveToken1,\n          children: [\"Approve \", token1 && token1.symbol]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1165,\n          columnNumber: 25\n        }, this), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1164,\n        columnNumber: 56\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"success\",\n        disabled: !buttonStatus,\n        onClick: async () => {\n          if (account == undefined) {\n            activate(injected);\n            setButtonContent(\"choose tokens and amount\");\n            setButtonStatus(false);\n          } else {\n            await addLiquidity({ ...token0,\n              amount: token0Amount\n            }, { ...token1,\n              amount: token1Amount\n            }, 100 * slippageTolerance, exactIn, chainId, library, account, pair, noLiquidity, parsedToken0Amount, parsedToken1Amount, args, value, setLiquidityStatus);\n          }\n        },\n        children: buttonContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1221,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"primary\",\n        children: [liquidityStatus && /*#__PURE__*/_jsxDEV(\"mark\", {\n          children: \" liquidityStatus:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1260,\n          columnNumber: 41\n        }, this), liquidityStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", liquidityStatus]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1261,\n          columnNumber: 41\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1259,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your positions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1264,\n        columnNumber: 17\n      }, this), userLiquidityPositions.map(position => /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"dark\",\n        children: Object.values(position).map(field => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: field\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1268,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1266,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 980,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 978,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LiquidityComponent, \"6zOuaVEwblGqJaxqRZu92m+Ir+I=\", false, function () {\n  return [useWeb3React];\n});\n\n_c = LiquidityComponent;\nexport default LiquidityComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"LiquidityComponent\");","map":{"version":3,"sources":["D:/GitHub/acy-dex-swap/src/components/LiquidityComponent.js"],"names":["useWeb3React","InjectedConnector","useCallback","useEffect","useState","ACYSwapErrorStatus","approve","calculateGasMargin","calculateSlippageAmount","checkTokenIsApproved","getRouterContract","getTokenTotalSupply","getUserTokenBalance","getUserTokenBalanceRaw","INITIAL_ALLOWED_SLIPPAGE","supportedTokens","Alert","Button","Dropdown","Form","FormControl","InputGroup","CurrencyAmount","ETHER","FACTORY_ADDRESS","Fetcher","InsufficientReservesError","Percent","Token","TokenAmount","WETH","BigNumber","parseUnits","getEstimated","inputToken0","inputToken1","allowedSlippage","exactIn","chainId","library","account","setToken0Amount","setToken1Amount","setNeedApproveToken0","setNeedApproveToken1","setApproveAmountToken0","setApproveAmountToken1","setApproveToken0ButtonShow","setApproveToken1ButtonShow","setLiquidityBreakdown","setButtonContent","setButtonStatus","setLiquidityStatus","setPair","setNoLiquidity","setParsedToken0Amount","setParsedToken1Amount","setArgs","setValue","status","console","log","router","slippage","address","inToken0Address","symbol","inToken0Symbol","decimal","inToken0Decimal","amount","inToken0Amount","inToken1Address","inToken1Symbol","inToken1Decimal","inToken1Amount","isNaN","parseFloat","token0IsETH","token1IsETH","token0","token1","equals","pair","fetchPairData","then","reserve0","raw","toString","reserve1","catch","e","noLiquidity","parsedAmount","fault","parsedToken0Amount","parsedToken1Amount","dependentTokenAmount","priceOf","quote","token0TokenAmount","ether","toExact","token1TokenAmount","userToken0Balance","userToken1Balance","userHasSufficientBalance","gte","totalSupply","liquidityToken","liquidityMinted","getLiquidityMinted","poolTokenPercentage","add","toFixed","approveStatus","token0approval","token1approval","estimate","method","args","value","estimateGas","addLiquidityETH","nonETHToken","parsedNonETHTokenAmount","minETH","Math","floor","Date","getTime","from","addLiquidity","getErrorText","result","estimatedGasLimit","gasLimit","url","hash","getAllLiquidityPositions","tokens","filter","token","totalTokenCount","length","userNonZeroLiquidityPositions","checkLiquidityPositionTasks","i","j","token0Address","token0Symbol","token0Decimal","token1Address","token1Symbol","token1Decimal","pairTask","push","pairs","Promise","allSettled","userPoolBalance","isZero","totalPoolTokens","token0Deposited","getLiquidityValue","token1Deposited","pool","token0Amount","toSignificant","token1Amount","token0Reserve","token1Reserve","share","LiquidityComponent","setToken0","setToken1","token0Balance","setToken0Balance","token1Balance","setToken1Balance","token0BalanceShow","setToken0BalanceShow","token1BalanceShow","setToken1BalanceShow","setExactIn","slippageTolerance","setSlippageTolerance","needApproveToken0","needApproveToken1","approveAmountToken0","approveAmountToken1","approveToken0ButtonShow","approveToken1ButtonShow","liquidityBreakdown","buttonContent","buttonStatus","liquidityStatus","userLiquidityPositions","setUserLiquidityPositions","individualFieldPlaceholder","dependentFieldPlaceholder","slippageTolerancePlaceholder","activate","injected","supportedChainIds","t0Changed","t1Changed","undefined","getAllUserLiquidityPositions","map","index","alert","target","info","state","position","Object","values","field"],"mappings":"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","sourcesContent":["import {useWeb3React} from \"@web3-react/core\";\r\nimport {InjectedConnector} from \"@web3-react/injected-connector\";\r\nimport {useCallback, useEffect, useState} from \"react\";\r\nimport {\r\n    ACYSwapErrorStatus,\r\n    approve,\r\n    calculateGasMargin,\r\n    calculateSlippageAmount,\r\n    checkTokenIsApproved,\r\n    getRouterContract,\r\n    getTokenTotalSupply,\r\n    getUserTokenBalance,\r\n    getUserTokenBalanceRaw,\r\n    INITIAL_ALLOWED_SLIPPAGE,\r\n    supportedTokens,\r\n} from \"../utils\";\r\n\r\nimport {Alert, Button, Dropdown, Form, FormControl, InputGroup} from \"react-bootstrap\";\r\nimport {\r\n    CurrencyAmount,\r\n    ETHER,\r\n    FACTORY_ADDRESS,\r\n    Fetcher,\r\n    InsufficientReservesError,\r\n    Percent,\r\n    Token,\r\n    TokenAmount,\r\n    WETH,\r\n} from \"@uniswap/sdk\";\r\nimport {BigNumber} from \"@ethersproject/bignumber\";\r\nimport {parseUnits} from \"@ethersproject/units\";\r\n\r\n\r\n// get the estimated amount of the other token required when adding liquidity, in readable string.\r\nexport async function getEstimated(\r\n    inputToken0,\r\n    inputToken1,\r\n    allowedSlippage = INITIAL_ALLOWED_SLIPPAGE,\r\n    exactIn = true,\r\n    chainId,\r\n    library,\r\n    account,\r\n    setToken0Amount,\r\n    setToken1Amount,\r\n    setNeedApproveToken0,\r\n    setNeedApproveToken1,\r\n    setApproveAmountToken0,\r\n    setApproveAmountToken1,\r\n    setApproveToken0ButtonShow,\r\n    setApproveToken1ButtonShow,\r\n    setLiquidityBreakdown,\r\n    setButtonContent,\r\n    setButtonStatus,\r\n    setLiquidityStatus,\r\n    setPair,\r\n    setNoLiquidity,\r\n    setParsedToken0Amount,\r\n    setParsedToken1Amount,\r\n    setArgs,\r\n    setValue\r\n) {\r\n    let status = await (async () => {\r\n        setNeedApproveToken0(false);\r\n        setNeedApproveToken1(false);\r\n        setApproveAmountToken0(\"0\");\r\n        setApproveAmountToken1(\"0\");\r\n        setApproveToken0ButtonShow(false);\r\n        setApproveToken1ButtonShow(false);\r\n        setLiquidityBreakdown(\"\");\r\n        setButtonContent(\"loading...\");\r\n        setButtonStatus(false);\r\n        setLiquidityStatus(\"\");\r\n\r\n        console.log(FACTORY_ADDRESS);\r\n\r\n        let router = getRouterContract(library, account);\r\n        let slippage = allowedSlippage * 0.01;\r\n        let {\r\n            address: inToken0Address,\r\n            symbol: inToken0Symbol,\r\n            decimal: inToken0Decimal,\r\n            amount: inToken0Amount,\r\n        } = inputToken0;\r\n        let {\r\n            address: inToken1Address,\r\n            symbol: inToken1Symbol,\r\n            decimal: inToken1Decimal,\r\n            amount: inToken1Amount,\r\n        } = inputToken1;\r\n\r\n        if (!inputToken0.symbol || !inputToken1.symbol)\r\n            return new ACYSwapErrorStatus(\"please choose tokens\");\r\n        if (exactIn && inToken0Amount == \"0\")\r\n            return new ACYSwapErrorStatus(\"token0Amount is 0\");\r\n        if (!exactIn && inToken1Amount == \"0\")\r\n            return new ACYSwapErrorStatus(\"token1Amount is 0\");\r\n        if (exactIn && inToken0Amount == \"\")\r\n            return new ACYSwapErrorStatus(\"token0Amount is \\\"\\\"\");\r\n        if (!exactIn && inToken1Amount == \"\")\r\n            return new ACYSwapErrorStatus(\"token1Amount is \\\"\\\"\");\r\n        if (exactIn && (isNaN(parseFloat(inToken0Amount))))\r\n            return new ACYSwapErrorStatus(\"token0Amount is NaN\");\r\n        if (!exactIn && (isNaN(parseFloat(inToken1Amount))))\r\n            return new ACYSwapErrorStatus(\"token1Amount is NaN\");\r\n\r\n        let token0IsETH = inToken0Symbol === \"ETH\";\r\n        let token1IsETH = inToken1Symbol === \"ETH\";\r\n\r\n        console.log(inputToken0);\r\n        console.log(inputToken1);\r\n        if (token0IsETH && token1IsETH) {\r\n            setButtonContent(\"Doesn't support ETH to ETH\");\r\n            setButtonStatus(false);\r\n            return new ACYSwapErrorStatus(\"Doesn't support ETH to ETH\");\r\n        } else if (\r\n            (token0IsETH && inToken1Symbol === \"WETH\") ||\r\n            (inToken0Symbol === \"WETH\" && token1IsETH)\r\n        ) {\r\n            setButtonContent(\"Invalid pair WETH/ETH\");\r\n            setButtonStatus(false);\r\n            return new ACYSwapErrorStatus(\"Invalid pair WETH/ETH\");\r\n        }\r\n        // ETH <-> Non-WETH ERC20     OR     Non-WETH ERC20 <-> Non-WETH ERC20\r\n        else {\r\n            console.log(\"ADD LIQUIDITY\");\r\n            console.log(\"------------------ CONSTRUCT TOKEN ------------------\");\r\n\r\n            // use WETH for ETHER to work with Uniswap V2 SDK\r\n            const token0 = token0IsETH\r\n                ? WETH[chainId]\r\n                : new Token(chainId, inToken0Address, inToken0Decimal, inToken0Symbol);\r\n            const token1 = token1IsETH\r\n                ? WETH[chainId]\r\n                : new Token(chainId, inToken1Address, inToken1Decimal, inToken1Symbol);\r\n\r\n            if (token0.equals(token1)) {\r\n                setButtonContent(\"Equal tokens\");\r\n                setButtonStatus(false);\r\n                return new ACYSwapErrorStatus(\"Equal tokens!\");\r\n            }\r\n            // get pair using our own provider\r\n            const pair = await Fetcher.fetchPairData(token0, token1, library)\r\n                .then((pair) => {\r\n                    console.log(pair.reserve0.raw.toString());\r\n                    console.log(pair.reserve1.raw.toString());\r\n                    return pair;\r\n                })\r\n                .catch((e) => {\r\n                    return new ACYSwapErrorStatus(\r\n                        `${token0.symbol} - ${token1.symbol} pool does not exist. Create one?`\r\n                    );\r\n                });\r\n\r\n            console.log(\"pair\");\r\n            console.log(pair);\r\n            setPair(pair);\r\n\r\n\r\n            let noLiquidity = false;\r\n            if (pair instanceof ACYSwapErrorStatus) {\r\n                noLiquidity = true;\r\n            }\r\n            setNoLiquidity(noLiquidity);\r\n            console.log(\"------------------ PARSE AMOUNT ------------------\");\r\n            // convert typed in amount to BigNumber using ethers.js's parseUnits,\r\n\r\n            let parsedAmount;\r\n            try {\r\n                parsedAmount = exactIn\r\n                    ? new TokenAmount(token0, parseUnits(inToken0Amount, inToken0Decimal))\r\n                    : new TokenAmount(token1, parseUnits(inToken1Amount, inToken1Decimal));\r\n\r\n            } catch (e) {\r\n                console.log(\"parsedAmount\");\r\n                console.log(e);\r\n                setButtonStatus(false);\r\n                if (e.fault === \"underflow\"){\r\n                    setButtonContent(e.fault);\r\n                    return new ACYSwapErrorStatus(e.fault);\r\n                }else {\r\n                    setButtonContent(\"unknow error\");\r\n                    return new ACYSwapErrorStatus(\"unknow error\");\r\n                }\r\n            }\r\n\r\n            let parsedToken0Amount;\r\n            let parsedToken1Amount;\r\n\r\n            // this is have pool\r\n            if (!noLiquidity) {\r\n                console.log(\"estimated dependent amount\");\r\n                let dependentTokenAmount;\r\n                if (exactIn) {\r\n                    dependentTokenAmount = pair.priceOf(token0).quote(parsedAmount);\r\n\r\n\r\n                    let token0TokenAmount;\r\n                    try {\r\n                        token0TokenAmount = new TokenAmount(\r\n                            token0,\r\n                            parseUnits(inToken0Amount, inToken0Decimal)\r\n                        );\r\n                    } catch (e) {\r\n                        console.log(\"token0TokenAmount\");\r\n                        console.log(e);\r\n                        setButtonStatus(false);\r\n                        if (e.fault === \"underflow\"){\r\n                            setButtonContent(e.fault);\r\n                            return new ACYSwapErrorStatus(e.fault);\r\n                        }else {\r\n                            setButtonContent(\"unknow error\");\r\n                            return new ACYSwapErrorStatus(\"unknow error\");\r\n                        }\r\n                    }\r\n\r\n                    parsedToken0Amount =\r\n                        token0 === ETHER\r\n                            ? CurrencyAmount.ether(token0TokenAmount.raw)\r\n                            : token0TokenAmount;\r\n\r\n                    parsedToken1Amount =\r\n                        token1 === ETHER\r\n                            ? CurrencyAmount.ether(dependentTokenAmount.raw)\r\n                            : dependentTokenAmount;\r\n                    setToken1Amount(dependentTokenAmount.toExact());\r\n                    inToken1Amount = dependentTokenAmount.toExact();\r\n                } else {\r\n                    dependentTokenAmount = pair.priceOf(token1).quote(parsedAmount);\r\n\r\n                    let token1TokenAmount;\r\n                    try{\r\n                        token1TokenAmount = new TokenAmount(\r\n                            token1,\r\n                            parseUnits(inToken1Amount, inToken1Decimal)\r\n                        );\r\n                    }catch(e){\r\n                        console.log(\"token0TokenAmount\");\r\n                        console.log(e);\r\n                        setButtonStatus(false);\r\n                        if (e.fault === \"underflow\"){\r\n                            setButtonContent(e.fault);\r\n                            return new ACYSwapErrorStatus(e.fault);\r\n                        }else {\r\n                            setButtonContent(\"unknow error\");\r\n                            return new ACYSwapErrorStatus(\"unknow error\");\r\n                        }\r\n                    }\r\n\r\n\r\n                    parsedToken0Amount =\r\n                        token0 === ETHER\r\n                            ? CurrencyAmount.ether(dependentTokenAmount.raw)\r\n                            : dependentTokenAmount;\r\n\r\n                    parsedToken1Amount =\r\n                        token1 === ETHER\r\n                            ? CurrencyAmount.ether(token1TokenAmount.raw)\r\n                            : token1TokenAmount;\r\n                    setToken0Amount(dependentTokenAmount.toExact());\r\n                    inToken0Amount = dependentTokenAmount.toExact();\r\n                }\r\n            } else {\r\n                // this is to create new pools\r\n                if (inToken0Amount === \"0\" || inToken1Amount === \"0\") {\r\n                    if (noLiquidity) {\r\n                        setButtonStatus(false);\r\n                        setButtonContent(\"create new pool\");\r\n\r\n                        return new ACYSwapErrorStatus(\r\n                            \"Creating a new pool, please enter both amounts\"\r\n                        );\r\n                    } else {\r\n                        setButtonStatus(false);\r\n                        setButtonContent(\"add liquidity\");\r\n                        return new ACYSwapErrorStatus(\r\n                            \"One field is empty, it's probably a new pool\"\r\n                        );\r\n                    }\r\n                }\r\n\r\n                try{\r\n                    parsedToken0Amount = new TokenAmount(\r\n                        token0,\r\n                        parseUnits(inToken0Amount, inToken0Decimal)\r\n                    );\r\n\r\n                    parsedToken1Amount = new TokenAmount(\r\n                        token1,\r\n                        parseUnits(inToken1Amount, inToken1Decimal)\r\n                    );\r\n                } catch(e) {\r\n                    console.log(\"parsedToken0Amount and parsedToken1Amount\");\r\n                    console.log(e);\r\n                    setButtonStatus(false);\r\n                    if (e.fault === \"underflow\") {\r\n                        setButtonContent(e.fault);\r\n                        return new ACYSwapErrorStatus(e.fault);\r\n                    } else {\r\n                        setButtonContent(\"unknow error\");\r\n                        return new ACYSwapErrorStatus(\"unknow error\");\r\n                    }\r\n                }\r\n            }\r\n            setParsedToken0Amount(parsedToken0Amount);\r\n            setParsedToken1Amount(parsedToken1Amount);\r\n\r\n            // check user account balance\r\n            console.log(\"------------------ CHECK BALANCE ------------------\");\r\n            let userToken0Balance = await getUserTokenBalanceRaw(\r\n                token0IsETH\r\n                    ? ETHER\r\n                    : new Token(chainId, inToken0Address, inToken0Decimal, inToken0Symbol),\r\n                account,\r\n                library\r\n            );\r\n\r\n            let userToken1Balance = await getUserTokenBalanceRaw(\r\n                token1IsETH\r\n                    ? ETHER\r\n                    : new Token(chainId, inToken1Address, inToken1Decimal, inToken1Symbol),\r\n                account,\r\n                library\r\n            );\r\n\r\n            console.log(\"token0 balance\");\r\n            console.log(userToken0Balance);\r\n\r\n            console.log(\"token1 balance\");\r\n            console.log(userToken1Balance);\r\n\r\n            let userHasSufficientBalance;\r\n            try {\r\n                userHasSufficientBalance =\r\n                    userToken0Balance.gte(parseUnits(inToken0Amount, inToken0Decimal)) &&\r\n                    userToken1Balance.gte(parseUnits(inToken1Amount, inToken1Decimal));\r\n            }catch(e){\r\n                console.log(userHasSufficientBalance);\r\n                console.log(e);\r\n                setButtonStatus(false);\r\n                if (e.fault === \"underflow\") {\r\n                    setButtonContent(e.fault);\r\n                    return new ACYSwapErrorStatus(e.fault);\r\n                } else {\r\n                    setButtonContent(\"unknow error\");\r\n                    return new ACYSwapErrorStatus(\"unknow error\");\r\n                }\r\n\r\n            }\r\n\r\n            // quit if user doesn't have enough balance, otherwise this will cause error\r\n            if (!userHasSufficientBalance) {\r\n                setButtonContent(\"Not enough balance\");\r\n                setButtonStatus(false);\r\n                return new ACYSwapErrorStatus(\"Not enough balance\");\r\n            }\r\n\r\n\r\n            console.log(\"------------------ BREAKDOWN ------------------\");\r\n            if (!noLiquidity) {\r\n                let totalSupply = await getTokenTotalSupply(\r\n                    pair.liquidityToken,\r\n                    library,\r\n                    account\r\n                );\r\n                console.log(\"Liquidity Minted\");\r\n                console.log(pair.liquidityToken);\r\n\r\n                try {\r\n                    let liquidityMinted = pair.getLiquidityMinted(\r\n                        totalSupply,\r\n                        parsedToken0Amount,\r\n                        parsedToken1Amount\r\n                    );\r\n                    let poolTokenPercentage = new Percent(\r\n                        liquidityMinted.raw,\r\n                        totalSupply.add(liquidityMinted).raw\r\n                    ).toFixed(4);\r\n\r\n                    setLiquidityBreakdown([\r\n                        `Slippage tolerance : ${slippage}%`,\r\n                        `Pool reserve: ${pair.reserve0.toExact()} ${\r\n                            pair.token0.symbol\r\n                        } + ${pair.reserve1.toExact()} ${pair.token1.symbol}`,\r\n                        `Pool share: ${poolTokenPercentage}%`,\r\n                        `${token0.symbol}: ${parsedToken0Amount.toExact()}`,\r\n                        `${token1.symbol}: ${parsedToken1Amount.toExact()}`,\r\n                        // noLiquidity ? \"100\" : `${poolTokenPercentage?.toSignificant(4)}} %`,\r\n                    ]);\r\n\r\n                } catch (e) {\r\n                    if (e instanceof InsufficientReservesError) {\r\n                        setButtonContent(\"Insufficient reserve!\");\r\n                        setButtonStatus(false);\r\n                        // alert(\"something wrong !!!!\");\r\n                        return new ACYSwapErrorStatus(\"Insufficient reserve!\");\r\n                        console.log(\"Insufficient reserve!\");\r\n                    } else {\r\n                        setButtonContent(\"Unhandled exception!\");\r\n                        setButtonStatus(false);\r\n                        return new ACYSwapErrorStatus(\"Unhandled exception!\");\r\n                        console.log(\"Unhandled exception!\");\r\n                        console.log(e);\r\n                    }\r\n                }\r\n            } else {\r\n                setLiquidityBreakdown([\"new pool\"]);\r\n            }\r\n            console.log(\"------------------ ALLOWANCE ------------------\");\r\n            let approveStatus = 0;\r\n            if (!token0IsETH) {\r\n                let token0approval = await checkTokenIsApproved(\r\n                    inToken0Address,\r\n                    parsedToken0Amount.raw.toString(),\r\n                    library,\r\n                    account\r\n                );\r\n                console.log(\"token 0 approved?\");\r\n                console.log(token0approval);\r\n\r\n                if (!token0approval) {\r\n                    console.log(\"Not enough allowance\");\r\n                    setApproveAmountToken0(parsedToken0Amount.raw.toString());\r\n                    setNeedApproveToken0(true);\r\n                    setApproveToken0ButtonShow(true);\r\n                    approveStatus += 1;\r\n                }\r\n            }\r\n            if (!token1IsETH) {\r\n                console.log(\r\n                    `Inside addLiquidity, amount needed: ${parsedToken1Amount.raw.toString()}`\r\n                );\r\n                let token1approval = await checkTokenIsApproved(\r\n                    inToken1Address,\r\n                    parsedToken1Amount.raw.toString(),\r\n                    library,\r\n                    account\r\n                );\r\n                console.log(\"token 1 approved?\");\r\n                console.log(token1approval);\r\n\r\n                if (!token1approval) {\r\n                    console.log(\"Not enough allowance for token1\");\r\n                    setApproveAmountToken1(parsedToken1Amount.raw.toString());\r\n                    setNeedApproveToken1(true);\r\n                    setApproveToken1ButtonShow(true);\r\n                    approveStatus += 2;\r\n                }\r\n            }\r\n            if (approveStatus > 0) {\r\n                setButtonStatus(false);\r\n                setButtonContent(\"need approve\");\r\n\r\n                return new ACYSwapErrorStatus(\r\n                    `Need approve ${\r\n                        approveStatus === 1\r\n                            ? inToken0Symbol\r\n                            : approveStatus === 2\r\n                                ? inToken1Symbol\r\n                                : `${inToken0Symbol} and ${inToken1Symbol}`\r\n                    }`\r\n                );\r\n            }\r\n            setButtonStatus(true);\r\n            if (noLiquidity) {\r\n                setButtonContent(\"create a new pool\");\r\n            } else {\r\n                setButtonContent(\"add liquidity\");\r\n            }\r\n\r\n            console.log(\r\n                \"------------------ PREPARE ADD LIQUIDITY ------------------\"\r\n            );\r\n            console.log(\"parsed token 0 amount\");\r\n            console.log(parsedToken0Amount.raw);\r\n            console.log(\"parsed token 1 amount\");\r\n            console.log(parsedToken1Amount.raw);\r\n            console.log(\"slippage\");\r\n            console.log(allowedSlippage);\r\n\r\n\r\n            let estimate;\r\n            let method;\r\n            let args;\r\n            let value;\r\n\r\n\r\n            if (token0IsETH || token1IsETH) {\r\n                estimate = router.estimateGas.addLiquidityETH;\r\n                method = router.addLiquidityETH;\r\n                let nonETHToken = token0IsETH ? token1 : token0;\r\n\r\n                let parsedNonETHTokenAmount = token0IsETH\r\n                    ? parsedToken1Amount\r\n                    : parsedToken0Amount;\r\n\r\n                let minETH = token0IsETH\r\n                    ? calculateSlippageAmount(\r\n                        parsedToken0Amount,\r\n                        noLiquidity ? 0 : allowedSlippage\r\n                    )[0].toString()\r\n                    : calculateSlippageAmount(\r\n                        parsedToken1Amount,\r\n                        noLiquidity ? 0 : allowedSlippage\r\n                    )[0].toString();\r\n\r\n                args = [\r\n                    nonETHToken.address,\r\n                    parsedNonETHTokenAmount.raw.toString(),\r\n                    calculateSlippageAmount(\r\n                        parsedNonETHTokenAmount,\r\n                        noLiquidity ? 0 : allowedSlippage\r\n                    )[0].toString(),\r\n                    minETH,\r\n                    account,\r\n                    `0x${(Math.floor(new Date().getTime() / 1000) + 60).toString(16)}`,\r\n                ];\r\n                value = BigNumber.from(\r\n                    (token1IsETH ? parsedToken1Amount : parsedToken0Amount).raw.toString()\r\n                );\r\n                console.log(value);\r\n            } else {\r\n                estimate = router.estimateGas.addLiquidity;\r\n                method = router.addLiquidity;\r\n                args = [\r\n                    inToken0Address,\r\n                    inToken1Address,\r\n                    parsedToken0Amount.raw.toString(),\r\n                    parsedToken1Amount.raw.toString(),\r\n                    calculateSlippageAmount(\r\n                        parsedToken0Amount,\r\n                        noLiquidity ? 0 : allowedSlippage\r\n                    )[0].toString(),\r\n                    calculateSlippageAmount(\r\n                        parsedToken1Amount,\r\n                        noLiquidity ? 0 : allowedSlippage\r\n                    )[0].toString(),\r\n                    account,\r\n                    `0x${(Math.floor(new Date().getTime() / 1000) + 60).toString(16)}`,\r\n                ];\r\n                value = null;\r\n            }\r\n            console.log(\"args\");\r\n            console.log(args);\r\n            console.log(\"estimate\");\r\n            console.log(estimate);\r\n            console.log(\"method\");\r\n            console.log(method);\r\n            console.log(\"value\");\r\n            console.log(value);\r\n\r\n            setArgs(args);\r\n            setValue(value);\r\n\r\n\r\n        }//  end of\r\n        // ETH <-> Non-WETH ERC20     OR     Non-WETH ERC20 <-> Non-WETH ERC20\r\n    })();\r\n\r\n    if (status instanceof ACYSwapErrorStatus) {\r\n        console.log(status.getErrorText());\r\n    } else {\r\n        console.log(status);\r\n    }\r\n}\r\n\r\nexport async function addLiquidity(\r\n    inputToken0,\r\n    inputToken1,\r\n    allowedSlippage = INITIAL_ALLOWED_SLIPPAGE,\r\n    exactIn = true,\r\n    chainId,\r\n    library,\r\n    account,\r\n    pair,\r\n    noLiquidity,\r\n    parsedToken0Amount,\r\n    parsedToken1Amount,\r\n    args,\r\n    value,\r\n    setLiquidityStatus\r\n) {\r\n    let status = await (async () => {\r\n        // check uniswap\r\n        console.log(FACTORY_ADDRESS);\r\n        let router = getRouterContract(library, account);\r\n\r\n        const {\r\n            address: inToken0Address,\r\n            symbol: inToken0Symbol,\r\n            decimal: inToken0Decimal,\r\n            amount: inToken0Amount,\r\n        } = inputToken0;\r\n        const {\r\n            address: inToken1Address,\r\n            symbol: inToken1Symbol,\r\n            decimal: inToken1Decimal,\r\n            amount: inToken1Amount,\r\n        } = inputToken1;\r\n\r\n        let token0IsETH = inToken0Symbol === \"ETH\";\r\n        let token1IsETH = inToken1Symbol === \"ETH\";\r\n\r\n\r\n        console.log(\"------------------ RECEIVED TOKEN ------------------\");\r\n        console.log(\"token0\");\r\n        console.log(inputToken0);\r\n        console.log(\"token1\");\r\n        console.log(inputToken1);\r\n\r\n        if (token0IsETH && token1IsETH)\r\n            return new ACYSwapErrorStatus(\"Doesn't support ETH to ETH\");\r\n\r\n        if (\r\n            (token0IsETH && inToken1Symbol === \"WETH\") ||\r\n            (inToken0Symbol === \"WETH\" && token1IsETH)\r\n        ) {\r\n            // UI should sync value of ETH and WETH\r\n            return new ACYSwapErrorStatus(\"Invalid pair WETH/ETH\");\r\n        }\r\n        // ETH <-> Non-WETH ERC20     OR     Non-WETH ERC20 <-> Non-WETH ERC20\r\n        else {\r\n            console.log(\"ADD LIQUIDITY\");\r\n            console.log(\"------------------ CONSTRUCT TOKEN ------------------\");\r\n            // use WETH for ETHER to work with Uniswap V2 SDK\r\n            const token0 = token0IsETH\r\n                ? WETH[chainId]\r\n                : new Token(chainId, inToken0Address, inToken0Decimal, inToken0Symbol);\r\n            const token1 = token1IsETH\r\n                ? WETH[chainId]\r\n                : new Token(chainId, inToken1Address, inToken1Decimal, inToken1Symbol);\r\n\r\n            // quit if the two tokens are equivalent, i.e. have the same chainId and address\r\n            if (token0.equals(token1)) return new ACYSwapErrorStatus(\"Equal tokens!\");\r\n\r\n\r\n            // get pair using our own provider\r\n            console.log(\"------------------ CONSTRUCT PAIR ------------------\");\r\n            console.log(\"FETCH pair\");\r\n            // if an error occurs, because pair doesn't exists\r\n            console.log(pair);\r\n            console.log(noLiquidity);\r\n            console.log(\"------------------ PARSE AMOUNT ------------------\");\r\n            console.log(parsedToken0Amount);\r\n            console.log(parsedToken1Amount);\r\n            console.log(\"------------------ CHECK BALANCE ------------------\");\r\n            console.log(\"------------------ BREAKDOWN ------------------\");\r\n            console.log(\"------------------ ALLOWANCE ------------------\");\r\n            console.log(\"------------------ PREPARE ADD LIQUIDITY ------------------\");\r\n            let estimate;\r\n            let method;\r\n            if (token0IsETH || token1IsETH) {\r\n                estimate = router.estimateGas.addLiquidityETH;\r\n                method = router.addLiquidityETH;\r\n                console.log(args);\r\n                console.log(value);\r\n            } else {\r\n                estimate = router.estimateGas.addLiquidity;\r\n                method = router.addLiquidity;\r\n                console.log(args);\r\n                console.log(value);\r\n            }\r\n\r\n            setLiquidityStatus(\"Processing add liquidity request\");\r\n            console.log(\"parsed token 0 amount\");\r\n            console.log(parsedToken0Amount.raw);\r\n            console.log(\"parsed token 1 amount\");\r\n            console.log(parsedToken1Amount.raw);\r\n            console.log(\"slippage\");\r\n            console.log(allowedSlippage);\r\n\r\n            console.log(estimate);\r\n            console.log(method);\r\n            console.log(args);\r\n            console.log(value);\r\n\r\n            let result = await estimate(...args, value ? {value} : {}).then(\r\n                (estimatedGasLimit) =>\r\n                    method(...args, {\r\n                        ...(value ? {value} : {}),\r\n                        gasLimit: calculateGasMargin(estimatedGasLimit),\r\n                    }).catch((e) => {\r\n                        return new ACYSwapErrorStatus(\"Error in transaction\");\r\n                    })\r\n            );\r\n            return result;\r\n        }\r\n    })();\r\n    if (status instanceof ACYSwapErrorStatus) {\r\n        setLiquidityStatus(status.getErrorText());\r\n    } else {\r\n        console.log(\"status\");\r\n        console.log(status);\r\n        let url = \"https://rinkeby.etherscan.io/tx/\" + status.hash;\r\n        setLiquidityStatus(<a href={url} target={\"_blank\"}>view it on etherscan</a>);\r\n    }\r\n    return;\r\n}\r\n\r\n// expects at least has WETH as one of the tokens\r\nexport async function getAllLiquidityPositions(tokens, chainId, library, account) {\r\n    // we only want WETH\r\n    tokens = tokens.filter((token) => token.symbol !== \"ETH\");\r\n\r\n    let totalTokenCount = tokens.length;\r\n    let userNonZeroLiquidityPositions = [];\r\n\r\n    if (totalTokenCount === 1) return;\r\n\r\n    let checkLiquidityPositionTasks = [];\r\n\r\n    for (let i = 0; i < totalTokenCount; i++) {\r\n        for (let j = i + 1; j < totalTokenCount; j++) {\r\n            const {\r\n                address: token0Address,\r\n                symbol: token0Symbol,\r\n                decimal: token0Decimal,\r\n            } = tokens[i];\r\n            const {\r\n                address: token1Address,\r\n                symbol: token1Symbol,\r\n                decimal: token1Decimal,\r\n            } = tokens[j];\r\n\r\n            const token0 = new Token(\r\n                chainId,\r\n                token0Address,\r\n                token0Decimal,\r\n                token0Symbol\r\n            );\r\n            const token1 = new Token(\r\n                chainId,\r\n                token1Address,\r\n                token1Decimal,\r\n                token1Symbol\r\n            );\r\n\r\n            // quit if the two tokens are equivalent, i.e. have the same chainId and address\r\n            if (token0.equals(token1)) continue;\r\n\r\n            // queue get pair task\r\n            const pairTask = Fetcher.fetchPairData(token0, token1, library);\r\n            checkLiquidityPositionTasks.push(pairTask);\r\n        }\r\n    }\r\n\r\n    let pairs = await Promise.allSettled(checkLiquidityPositionTasks);\r\n\r\n    // now we process the pairs\r\n    for (let pair of pairs) {\r\n        if (pair.status === \"rejected\") continue;\r\n\r\n        pair = pair.value;\r\n\r\n        let userPoolBalance = await getUserTokenBalanceRaw(\r\n            pair.liquidityToken,\r\n            account,\r\n            library\r\n        );\r\n\r\n        if (userPoolBalance.isZero()) continue;\r\n\r\n        userPoolBalance = new TokenAmount(pair.liquidityToken, userPoolBalance);\r\n\r\n        let totalPoolTokens = await getTokenTotalSupply(\r\n            pair.liquidityToken,\r\n            library,\r\n            account\r\n        );\r\n\r\n        let token0Deposited = pair.getLiquidityValue(\r\n            pair.token0,\r\n            totalPoolTokens,\r\n            userPoolBalance,\r\n            false\r\n        );\r\n        let token1Deposited = pair.getLiquidityValue(\r\n            pair.token1,\r\n            totalPoolTokens,\r\n            userPoolBalance,\r\n            false\r\n        );\r\n\r\n        let totalSupply = await getTokenTotalSupply(\r\n            pair.liquidityToken,\r\n            library,\r\n            account\r\n        );\r\n\r\n        // let liquidityMinted = pair.getLiquidityMinted(\r\n        //     totalSupply,\r\n        //     token0Deposited,\r\n        //     token1Deposited\r\n        // );\r\n\r\n        let poolTokenPercentage = new Percent(\r\n            userPoolBalance.raw,\r\n            totalSupply.raw\r\n        ).toFixed(4);\r\n\r\n        userNonZeroLiquidityPositions.push({\r\n            pool: `${pair.token0.symbol}/${pair.token1.symbol}`,\r\n            token0Amount: `${token0Deposited.toSignificant(6)} ${pair.token0.symbol}`,\r\n            token1Amount: `${token1Deposited.toSignificant(6)} ${pair.token1.symbol}`,\r\n            token0Reserve: `${pair.reserve0.toExact()} ${pair.token0.symbol}`,\r\n            token1Reserve: `${pair.reserve1.toExact()} ${pair.token1.symbol}`,\r\n            share: `${poolTokenPercentage}%`,\r\n        });\r\n    }\r\n\r\n    console.log(\"token pairs that user has positions:\");\r\n    console.log(userNonZeroLiquidityPositions);\r\n    return userNonZeroLiquidityPositions;\r\n}\r\n\r\nconst LiquidityComponent = () => {\r\n    let [token0, setToken0] = useState(null);\r\n    let [token1, setToken1] = useState(null);\r\n    let [token0Balance, setToken0Balance] = useState(\"not know yet\");\r\n    let [token1Balance, setToken1Balance] = useState(\"not know yet\");\r\n    let [token0Amount, setToken0Amount] = useState(\"0\");\r\n    let [token1Amount, setToken1Amount] = useState(\"0\");\r\n    let [token0BalanceShow, setToken0BalanceShow] = useState(false);\r\n    let [token1BalanceShow, setToken1BalanceShow] = useState(false);\r\n\r\n    // true 指前面的，false指后面的\r\n    let [exactIn, setExactIn] = useState(true);\r\n    let [slippageTolerance, setSlippageTolerance] = useState(INITIAL_ALLOWED_SLIPPAGE / 100);\r\n\r\n    let [needApproveToken0, setNeedApproveToken0] = useState(false);\r\n    let [needApproveToken1, setNeedApproveToken1] = useState(false);\r\n    let [approveAmountToken0, setApproveAmountToken0] = useState(\"0\");\r\n    let [approveAmountToken1, setApproveAmountToken1] = useState(\"0\");\r\n\r\n    let [approveToken0ButtonShow, setApproveToken0ButtonShow] = useState(false);\r\n    let [approveToken1ButtonShow, setApproveToken1ButtonShow] = useState(false);\r\n\r\n\r\n    let [liquidityBreakdown, setLiquidityBreakdown] = useState();\r\n    let [buttonContent, setButtonContent] = useState(\"connect to wallet\");\r\n    let [buttonStatus, setButtonStatus] = useState(true);\r\n    let [liquidityStatus, setLiquidityStatus] = useState();\r\n\r\n    let [pair, setPair] = useState();\r\n    let [noLiquidity, setNoLiquidity] = useState();\r\n    let [parsedToken0Amount, setParsedToken0Amount] = useState();\r\n    let [parsedToken1Amount, setParsedToken1Amount] = useState();\r\n\r\n    let [args, setArgs] = useState();\r\n    let [value, setValue] = useState();\r\n\r\n\r\n    let [userLiquidityPositions, setUserLiquidityPositions] = useState([]);\r\n\r\n    const individualFieldPlaceholder = \"Enter amount\";\r\n    const dependentFieldPlaceholder = \"Estimated value\";\r\n    const slippageTolerancePlaceholder = \"please input a number from 1.00 to 100.00\";\r\n\r\n    const {account, chainId, library, activate} = useWeb3React();\r\n    const injected = new InjectedConnector({\r\n        supportedChainIds: [1, 3, 4, 5, 42, 80001],\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        // activate(injected);\r\n    }, []);\r\n\r\n    let t0Changed = useCallback(async () => {\r\n        if (!token0 || !token1) return;\r\n        if (!exactIn) return;\r\n        await getEstimated(\r\n            {\r\n                ...token0,\r\n                amount: token0Amount,\r\n            },\r\n            {\r\n                ...token1,\r\n                amount: token1Amount,\r\n            },\r\n            slippageTolerance * 100,\r\n            exactIn,\r\n            chainId,\r\n            library,\r\n            account,\r\n            setToken0Amount,\r\n            setToken1Amount,\r\n            setNeedApproveToken0,\r\n            setNeedApproveToken1,\r\n            setApproveAmountToken0,\r\n            setApproveAmountToken1,\r\n            setApproveToken0ButtonShow,\r\n            setApproveToken1ButtonShow,\r\n            setLiquidityBreakdown,\r\n            setButtonContent,\r\n            setButtonStatus,\r\n            setLiquidityStatus,\r\n            setPair,\r\n            setNoLiquidity,\r\n            setParsedToken0Amount,\r\n            setParsedToken1Amount,\r\n            setArgs,\r\n            setValue);\r\n\r\n    }, [token0, token1, token0Amount, token1Amount, slippageTolerance,exactIn, chainId, library, account]);\r\n    let t1Changed = useCallback(async () => {\r\n        if (!token0 || !token1) return;\r\n        if (exactIn) return;\r\n        await getEstimated(\r\n            {\r\n                ...token0,\r\n                amount: token0Amount,\r\n            },\r\n            {\r\n                ...token1,\r\n                amount: token1Amount,\r\n            },\r\n            slippageTolerance * 100,\r\n            exactIn,\r\n            chainId,\r\n            library,\r\n            account,\r\n            setToken0Amount,\r\n            setToken1Amount,\r\n            setNeedApproveToken0,\r\n            setNeedApproveToken1,\r\n            setApproveAmountToken0,\r\n            setApproveAmountToken1,\r\n            setApproveToken0ButtonShow,\r\n            setApproveToken1ButtonShow,\r\n            setLiquidityBreakdown,\r\n            setButtonContent,\r\n            setButtonStatus,\r\n            setLiquidityStatus,\r\n            setPair,\r\n            setNoLiquidity,\r\n            setParsedToken0Amount,\r\n            setParsedToken1Amount,\r\n            setArgs,\r\n            setValue);\r\n    }, [token0, token1, token0Amount, token1Amount, slippageTolerance, exactIn, chainId, library, account]);\r\n    useEffect(() => {\r\n        t0Changed();\r\n    }, [token0, token1, token0Amount, token1Amount, slippageTolerance,exactIn, chainId, library, account]);\r\n    useEffect(() => {\r\n        t1Changed();\r\n    }, [token0, token1, token0Amount, token1Amount, slippageTolerance,exactIn, chainId, library, account]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (account == undefined) {\r\n            setButtonStatus(true);\r\n            setButtonContent(\"Connect to Wallet\");\r\n        } else {\r\n            setButtonContent(\"choose tokens and amount\");\r\n            setButtonStatus(false);\r\n        }\r\n    }, [chainId, library, account]);\r\n\r\n    useEffect(() => {\r\n        async function getAllUserLiquidityPositions() {\r\n            if (account != undefined) {\r\n                setUserLiquidityPositions(\r\n                    await getAllLiquidityPositions(\r\n                        supportedTokens,\r\n                        chainId,\r\n                        library,\r\n                        account\r\n                    )\r\n                );\r\n            }\r\n        }\r\n\r\n        getAllUserLiquidityPositions();\r\n    }, [chainId, library, account]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Add liquidity</h1>\r\n            <Form>\r\n                <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                    <Dropdown>\r\n                        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                            {(token0 && token0.symbol) || \"In token\"}\r\n                        </Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu>\r\n                            {supportedTokens.map((token, index) => (\r\n                                <Dropdown.Item\r\n                                    key={index}\r\n                                    onClick={async () => {\r\n                                        if (account == undefined) {\r\n                                            alert(\"please connect to your account\");\r\n                                        } else {\r\n                                            setToken0(token);\r\n                                            setToken0Balance(\r\n                                                await getUserTokenBalance(\r\n                                                    token,\r\n                                                    chainId,\r\n                                                    account,\r\n                                                    library\r\n                                                )\r\n                                            );\r\n                                            setToken0BalanceShow(true);\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {token.symbol}\r\n                                </Dropdown.Item>\r\n                            ))}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                    <Form.Control\r\n                        value={token0Amount}\r\n                        placeholder={\r\n                            exactIn ? individualFieldPlaceholder : dependentFieldPlaceholder\r\n                        }\r\n                        onChange={(e) => {\r\n                            setExactIn(true);\r\n                            setToken0Amount(e.target.value);\r\n                        }}\r\n                    />\r\n                    {token0BalanceShow ?\r\n                        <small>Balance: {token0Balance}</small> :\r\n                        <small>not know yet</small>\r\n                    }\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n                    <Dropdown>\r\n                        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                            {(token1 && token1.symbol) || \"Out token\"}\r\n                        </Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu>\r\n                            {supportedTokens.map((token, index) => (\r\n                                <Dropdown.Item\r\n                                    key={index}\r\n                                    onClick={async () => {\r\n                                        if (account == undefined) {\r\n                                            alert(\"please connect to your account\");\r\n                                        } else {\r\n                                            setToken1(token);\r\n                                            setToken1Balance(\r\n                                                await getUserTokenBalance(\r\n                                                    token,\r\n                                                    chainId,\r\n                                                    account,\r\n                                                    library\r\n                                                )\r\n                                            );\r\n                                            setToken1BalanceShow(true);\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {token.symbol}\r\n                                </Dropdown.Item>\r\n                            ))}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                    <Form.Control\r\n                        value={token1Amount}\r\n                        placeholder={\r\n                            exactIn ? dependentFieldPlaceholder : individualFieldPlaceholder\r\n                        }\r\n                        onChange={(e) => {\r\n                            setExactIn(false);\r\n                            setToken1Amount(e.target.value);\r\n                        }}\r\n                    />\r\n                    {token1BalanceShow ?\r\n                        <small>Balance: {token1Balance}</small> :\r\n                        <small>not know yet</small>\r\n                    }\r\n                </Form.Group>\r\n                <InputGroup size=\"sm\" className=\"mb-3\">\r\n                    <InputGroup.Text id=\"inputGroup-sizing-sm\">Slippage tolerance </InputGroup.Text>\r\n                    <FormControl\r\n                        aria-label=\"Small\"\r\n                        aria-describedby=\"inputGroup-sizing-sm\"\r\n                        placeholder={slippageTolerancePlaceholder}\r\n                        onChange={(e => {\r\n                            setSlippageTolerance(e.target.value);\r\n                        })}\r\n\r\n                    />\r\n                    <InputGroup.Text>%</InputGroup.Text>\r\n                </InputGroup>\r\n                <Alert variant=\"danger\">\r\n                    the Slippage Tolerance you choose is [ {slippageTolerance}% ]\r\n                </Alert>\r\n\r\n\r\n                <Alert variant=\"primary\">\r\n                    {liquidityBreakdown && <mark>liquidity breakdown</mark>}\r\n                    {liquidityBreakdown && liquidityBreakdown.map((info) => <p>{info}</p>)}\r\n                </Alert>\r\n\r\n\r\n                {/* APPROVE BUTTONS */}\r\n                {\r\n                    approveToken0ButtonShow == true && <mark>\r\n                        <Button\r\n                            variant=\"warning\"\r\n                            onClick={async () => {\r\n\r\n                                \r\n                                let state = await approve(token0.address, approveAmountToken0, library, account);\r\n                                \r\n                                if (state == true) {\r\n                                 \r\n                                    setNeedApproveToken0(false);\r\n\r\n                                    await getEstimated(\r\n                                        {\r\n                                            ...token0,\r\n                                            amount: token0Amount,\r\n                                        },\r\n                                        {\r\n                                            ...token1,\r\n                                            amount: token1Amount,\r\n                                        },\r\n                                        slippageTolerance * 100,\r\n                                        exactIn,\r\n                                        chainId,\r\n                                        library,\r\n                                        account,\r\n                                        setToken0Amount,\r\n                                        setToken1Amount,\r\n                                        setNeedApproveToken0,\r\n                                        setNeedApproveToken1,\r\n                                        setApproveAmountToken0,\r\n                                        setApproveAmountToken1,\r\n                                        setApproveToken0ButtonShow,\r\n                                        setApproveToken1ButtonShow,\r\n                                        setLiquidityBreakdown,\r\n                                        setButtonContent,\r\n                                        setButtonStatus,\r\n                                        setLiquidityStatus,\r\n                                        setPair,\r\n                                        setNoLiquidity,\r\n                                        setParsedToken0Amount,\r\n                                        setParsedToken1Amount,\r\n                                        setArgs,\r\n                                        setValue);\r\n\r\n\r\n\r\n                                    if (needApproveToken1 == false) {\r\n                                        if (!noLiquidity) setButtonContent(\"add liquidity\");\r\n                                        else setButtonStatus(\"create new pool\");\r\n                                        setButtonStatus(true);\r\n                                    }\r\n\r\n                                }\r\n                            }}\r\n                            disabled={!needApproveToken0}\r\n                        >\r\n                            Approve {token0 && token0.symbol}\r\n                        </Button>\r\n                        {' '}\r\n                    </mark>\r\n                }\r\n                {\r\n                    approveToken1ButtonShow == true && <mark>\r\n                        <Button\r\n                            variant=\"warning\"\r\n                            onClick={async () => {\r\n                                let state = await approve(token1.address, approveAmountToken1, library, account);\r\n\r\n                                if (state == true) {\r\n                                    // console.log(\"TTTTTTTTTTTTTTTTTTTTTTT\");\r\n                                    // alert(\"TTTTTTTTTTTTTT\");\r\n                                    setNeedApproveToken1(false);\r\n\r\n                                    await getEstimated(\r\n                                        {\r\n                                            ...token0,\r\n                                            amount: token0Amount,\r\n                                        },\r\n                                        {\r\n                                            ...token1,\r\n                                            amount: token1Amount,\r\n                                        },\r\n                                        slippageTolerance * 100,\r\n                                        exactIn,\r\n                                        chainId,\r\n                                        library,\r\n                                        account,\r\n                                        setToken0Amount,\r\n                                        setToken1Amount,\r\n                                        setNeedApproveToken0,\r\n                                        setNeedApproveToken1,\r\n                                        setApproveAmountToken0,\r\n                                        setApproveAmountToken1,\r\n                                        setApproveToken0ButtonShow,\r\n                                        setApproveToken1ButtonShow,\r\n                                        setLiquidityBreakdown,\r\n                                        setButtonContent,\r\n                                        setButtonStatus,\r\n                                        setLiquidityStatus,\r\n                                        setPair,\r\n                                        setNoLiquidity,\r\n                                        setParsedToken0Amount,\r\n                                        setParsedToken1Amount,\r\n                                        setArgs,\r\n                                        setValue);\r\n                                    if (needApproveToken0 == false) {\r\n                                        if (!noLiquidity) setButtonContent(\"add liquidity\");\r\n                                        else setButtonStatus(\"create new pool\");\r\n                                        setButtonStatus(true);\r\n                                    }\r\n                                }\r\n                            }}\r\n                            disabled={!needApproveToken1}\r\n                        >\r\n                            Approve {token1 && token1.symbol}\r\n                        </Button>\r\n                        {' '}\r\n                    </mark>\r\n                }\r\n                <Button\r\n                    variant=\"success\"\r\n                    disabled={!buttonStatus}\r\n                    onClick={async () => {\r\n                        if (account == undefined) {\r\n                            activate(injected);\r\n                            setButtonContent(\"choose tokens and amount\");\r\n                            setButtonStatus(false);\r\n                        } else {\r\n                            await addLiquidity(\r\n                                {\r\n                                    ...token0,\r\n                                    amount: token0Amount,\r\n                                },\r\n                                {\r\n                                    ...token1,\r\n                                    amount: token1Amount,\r\n                                },\r\n                                100 * slippageTolerance,\r\n                                exactIn,\r\n                                chainId,\r\n                                library,\r\n                                account,\r\n                                pair,\r\n                                noLiquidity,\r\n                                parsedToken0Amount,\r\n                                parsedToken1Amount,\r\n                                args,\r\n                                value,\r\n                                setLiquidityStatus\r\n                            );\r\n\r\n                        }\r\n                    }\r\n                    }\r\n                >\r\n                    {buttonContent}\r\n                </Button>\r\n                <Alert variant=\"primary\">\r\n                    {liquidityStatus && <mark> liquidityStatus:</mark>}\r\n                    {liquidityStatus && <p> {liquidityStatus}</p>}\r\n                </Alert>\r\n\r\n                <h2>Your positions</h2>\r\n                {userLiquidityPositions.map((position) => (\r\n                    <Alert variant=\"dark\">\r\n                        {Object.values(position).map((field) => (\r\n                            <p>{field}</p>\r\n                        ))}\r\n                    </Alert>\r\n                ))}\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LiquidityComponent;\r\n"]},"metadata":{},"sourceType":"module"}